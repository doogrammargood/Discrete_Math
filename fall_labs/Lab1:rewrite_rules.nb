(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[     72227,       1796]
NotebookOptionsPosition[     59688,       1587]
NotebookOutlinePosition[     60103,       1604]
CellTagsIndexPosition[     60060,       1601]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Lab 1: Mathematica and Rewrite Rules", "Title",
 CellChangeTimes->{{3.946401246049262*^9, 3.946401277236569*^9}, 
   3.946401432282701*^9},ExpressionUUID->"fe0a63a3-0ccb-4e21-89c7-\
f4c23ddc88f8"],

Cell["\<\
Mathematica is a fancy calculator. It is extremely powerful, and claims to be \
able to answer any question accurately. In the wake of unreliable tools like \
LLMs, I believe that it is essential that students learn reliable methods to \
obtain answers to their questions. Mathematica is a \
\[OpenCurlyDoubleQuote]computer algebra system,\[CloseCurlyDoubleQuote] \
meaning that it mechanically performs the algebra we would otherwise need to \
perform by hand. It does this through a system of re-write rules, which are \
analogous to the logical equivalences of Table 1.5.1 in Zybooks. In this lab, \
we will demonstrate the relationship between logical steps and rewrite rules \
in Mathematica by implementing Table 1.5.1. Our resulting rewrite rules will \
allow us to transform any proposition into Normal Form.\
\>", "Text",
 CellChangeTimes->{{3.9464012884275103`*^9, 3.946401655306466*^9}, {
  3.9651383780595016`*^9, 
  3.965138387091322*^9}},ExpressionUUID->"0241d6b0-8b80-441e-90f1-\
c573f31de87b"],

Cell[CellGroupData[{

Cell["Mathematica Primer", "Subtitle",
 CellChangeTimes->{{3.946401711469582*^9, 3.946401713871106*^9}, {
  3.946401748582302*^9, 
  3.946401782443713*^9}},ExpressionUUID->"71ac6fa4-d744-41d7-9485-\
d59f1bc024fe"],

Cell["\<\
Mathematica is a functional programming language, meaning that we should \
think of each thing that the code does as applying a function. Mathematica \
prides itself on a simple syntax relying on just a few rules. Here is a short \
description.

1.) Built-in Functions are capitalized.
2.) Function application is square brackets, i.e. f[] calls the function f on \
no arguments.
3.) Lists are given by curly brackets {}
4.) Indexing a list is achieved by double brackets {1,2,3}[[1]]=1 (indexing \
starts at 1)
5.) All Mathematica code can be written using the form above. For example, \
\[OpenCurlyDoubleQuote]a=b\[CloseCurlyDoubleQuote] is shorthand for \
\[OpenCurlyDoubleQuote]Set[a,b]\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]a+b\[CloseCurlyDoubleQuote] is shorthand for \
\[OpenCurlyDoubleQuote]Add[a,b].\[CloseCurlyDoubleQuote]
6.) User-defined functions are defined by expressions like f[a_,b_]:=a+b. Use \
square brackets. The variables that have underscores, and the output is on \
the right of :=.

Computation in Mathematica is achieved by applying a chain of functions. \
Ideally, these are pure functions, but actually some functions have side \
effects. See this Tutorial for a quick start: \
https://www.wolfram.com/language/fast-introduction-for-math-students/en///

This video does a great job of selling the software:
https://www.youtube.com/watch?v=zJafYAN5RL\
\>", "Text",
 CellChangeTimes->{{3.946401804853022*^9, 3.9464019049246807`*^9}, {
   3.94640195048359*^9, 3.946402061116337*^9}, {3.946402097352312*^9, 
   3.9464021317564993`*^9}, {3.946402181792562*^9, 3.946402268402458*^9}, {
   3.946402331163595*^9, 3.946402362400599*^9}, {3.946402573111081*^9, 
   3.9464029245767803`*^9}, {3.9651386511271763`*^9, 
   3.9651388270242453`*^9}, {3.965138861147043*^9, 3.96513886219525*^9}, {
   3.965138915704431*^9, 3.965138965146245*^9}, 3.965139000771295*^9, {
   3.965142573547514*^9, 
   3.9651427847915697`*^9}},ExpressionUUID->"e06ef37e-2d29-4b66-9d4a-\
62a90e890ae2"],

Cell["\<\
There are many great tutorials online. The problem is that Mathematica is \
very powerful, so there are many ways to use it. In this tutorial, we use its \
capacities to apply rewrite rules, as explained here:
https://reference.wolfram.com/language/tutorial/\
TransformationRulesAndDefinitions.html#18035

I personally found this 3-part tutorial to be the most helpful:
https://www.wolfram.com/broadcast/video.php?c=96&v=1203&disp=grid&ob=date&o=\
DESC&p=1

A few tricks go a long way to understand Mathematica
1.) Blue symbols have not yet been defined. Maybe you need to evaluate a cell \
first.
2.) Shift + enter evaluates a cell. The order that you evaluate cells in \
matters.
3.) By default, all notebooks share a context. The \[OpenCurlyQuote]x\
\[CloseCurlyQuote] in one notebook will see the \[OpenCurlyQuote]x\
\[CloseCurlyQuote] in another. Disable this by Evaluation -> Default Notebook \
Context -> Unique to this Notebook
4.) (*Comments are written like this*)
5.) A semicolon at the end of a line suppresses its output;
6.) % refers to the last result generated. (the previous output)
7.) FullForm expands an expression into nested functions.
8.) Copying/pasting can produce Mathematica code with invis\
\>", "Text",
 CellChangeTimes->{{3.946402370638545*^9, 3.9464024387629547`*^9}, {
  3.946402471501668*^9, 3.946402475577466*^9}, {3.965139006627646*^9, 
  3.965139010392967*^9}, {3.965139091576748*^9, 3.965139136131515*^9}, {
  3.965139174563941*^9, 3.965139191001783*^9}, {3.965141895866547*^9, 
  3.9651419101868963`*^9}, {3.9651419633287983`*^9, 3.965141977861349*^9}, {
  3.965142922764977*^9, 3.9651429818082438`*^9}, {3.965384671429388*^9, 
  3.965384724021326*^9}},ExpressionUUID->"f2a6c6d4-b5bf-4376-b939-\
ec7ebca91caf"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Rewrite rules", "Subtitle",
 CellChangeTimes->{{3.946402485424389*^9, 3.9464024904700603`*^9}, {
  3.946402935413034*^9, 3.9464029452863503`*^9}, {3.96514061626256*^9, 
  3.965140653919986*^9}},ExpressionUUID->"abc2bb02-6882-4288-ba9e-\
24340919caa1"],

Cell["\<\
A re-write rule re-writes an expression, according to a rule. In Mathematica, \
we represent rules using ->. Note that this symbol is different from logical \
implication, which is esc=> esc.\
\>", "Text",
 CellChangeTimes->{{3.965140691865518*^9, 
  3.965140792312232*^9}},ExpressionUUID->"c59dc910-9fa0-4a17-8ef7-\
fd061900e039"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rule", " ", "=", " ", 
  RowBox[{"a", "->", "b", " ", 
   RowBox[{"(*", 
    RowBox[{"Replace", " ", "all", " ", 
     RowBox[{"a", "'"}], "s", " ", "with", " ", "b"}], "*)"}]}]}]], "Input",
 CellChangeTimes->{{3.965140804501652*^9, 3.96514081818828*^9}, {
  3.965140936504566*^9, 3.965140965344125*^9}, {3.9651411744399843`*^9, 
  3.965141182351468*^9}},ExpressionUUID->"f40c0006-54ff-47e5-91e4-\
9b96b3d96d10"],

Cell[BoxData[
 RowBox[{"a", "\[Rule]", "b"}]], "Output",
 CellChangeTimes->{
  3.965140826272208*^9, 3.965140945104906*^9, {3.965140991032405*^9, 
   3.965140998932976*^9}, 3.9651410617570057`*^9},
 CellLabel->
  "Out[143]=",ExpressionUUID->"9add828f-e77e-4601-a6a9-cb5e3b4220da"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"expression", " ", "=", 
  RowBox[{"a", "+", 
   RowBox[{"a", " ", "b", " "}]}]}]], "Input",
 CellChangeTimes->{{3.9651408342990313`*^9, 3.965140928237575*^9}, {
   3.965140973309752*^9, 3.965140980509757*^9}, 3.965141012035727*^9, {
   3.965141078594294*^9, 3.96514112540233*^9}, {3.9651411973579397`*^9, 
   3.9651412137478743`*^9}, 3.965141264160277*^9},
 CellLabel->
  "In[154]:=",ExpressionUUID->"fb47e106-bc5f-40e4-af3e-3723e13850d0"],

Cell[BoxData[
 RowBox[{"a", "+", 
  RowBox[{"a", " ", "b"}]}]], "Output",
 CellChangeTimes->{3.9651412650784082`*^9},
 CellLabel->
  "Out[154]=",ExpressionUUID->"55eaa202-1164-45c6-bfe3-1e1d7d3792f9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"expression", "/.", " ", "rule", " ", 
  RowBox[{"(*", 
   RowBox[{
   "The", " ", "rule", " ", "is", " ", "applied", " ", "to", " ", "the", " ", 
    "expression", " ", 
    RowBox[{"once", "."}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.965140857363246*^9, 3.965140875075094*^9}, {
  3.965140984052526*^9, 3.965140985338841*^9}, {3.965141024533619*^9, 
  3.965141024580325*^9}, {3.965141055654573*^9, 3.96514105641735*^9}, {
  3.965141167865057*^9, 3.965141170888318*^9}, {3.965141218676938*^9, 
  3.96514124490481*^9}},
 CellLabel->
  "In[167]:=",ExpressionUUID->"e898ff11-0dbc-4cb3-bc49-8c9707d99e12"],

Cell[BoxData[
 RowBox[{"b", "+", 
  SuperscriptBox["b", "2"]}]], "Output",
 CellChangeTimes->{
  3.965140876526087*^9, {3.965140932121915*^9, 3.965140950224225*^9}, {
   3.965140994776125*^9, 3.965141026389453*^9}, {3.965141057121818*^9, 
   3.965141150408231*^9}, 3.965141266900901*^9, 3.965141391328657*^9},
 CellLabel->
  "Out[167]=",ExpressionUUID->"13b5a903-d9c9-4daf-9ecd-ca39f047920c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"expression", " ", ":=", " ", 
  RowBox[{"a", "+", 
   RowBox[{"a", " ", "b"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"expression", " ", "//.", "rule", " ", 
  RowBox[{"(*", 
   RowBox[{"The", " ", "rule", " ", "is", " ", "applied", " ", 
    RowBox[{"repeatedly", ".", " ", "Same"}], " ", "result", " ", "in", " ", 
    "this", " ", 
    RowBox[{"case", "."}]}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.9651412491226187`*^9, 3.965141385898559*^9}},
 CellLabel->
  "In[165]:=",ExpressionUUID->"f73a6a08-d7ec-453a-a4a0-02e5f9b06468"],

Cell[BoxData[
 RowBox[{"b", "+", 
  SuperscriptBox["b", "2"]}]], "Output",
 CellChangeTimes->{
  3.96514129803434*^9, {3.965141329212982*^9, 3.965141338966621*^9}, 
   3.96514138712438*^9},
 CellLabel->
  "Out[166]=",ExpressionUUID->"e6b8732c-09bb-4397-93b4-56f2c0488b89"]
}, Open  ]],

Cell[CellGroupData[{

Cell["DeMorgan\[CloseCurlyQuote]s Law as a rewrite rule", "Subsection",
 CellChangeTimes->{{3.965140682136311*^9, 
  3.965140690874555*^9}},ExpressionUUID->"58f890fc-ff4c-4917-8cce-\
944b4b05194d"],

Cell["\<\
Let\[CloseCurlyQuote]s create a compound proposition, P, that depends on two \
basic propositions, p and q.\
\>", "Text",
 CellChangeTimes->{{3.946402953464123*^9, 3.946402958548565*^9}, {
  3.946403016841221*^9, 3.9464030267398653`*^9}, {3.946403308334683*^9, 
  3.9464033138605022`*^9}, {3.965138444350095*^9, 3.965138457714582*^9}, {
  3.96513924561474*^9, 
  3.96513924694097*^9}},ExpressionUUID->"14fcb2ed-2901-46a2-9f00-\
ca2ac4cc33a9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Clear", "[", "P", "]"}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Clear", " ", "'"}], 
    RowBox[{"forgets", "'"}], " ", "any", " ", "previous", " ", "information",
     " ", "that", " ", "was", " ", "stored", " ", "in", " ", 
    RowBox[{"P", "."}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.946403316985113*^9, 3.946403319559395*^9}, {
  3.9651384602462673`*^9, 3.9651385446798897`*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"f468ab21-d1b1-4dab-b713-cdcc81e6d733"],

Cell[BoxData[
 RowBox[{
  RowBox[{"P", "[", 
   RowBox[{"p_", ",", "q_"}], "]"}], ":=", " ", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"!", "p"}], ")"}], "&&", " ", 
   RowBox[{"(", 
    RowBox[{"!", "q"}], ")"}], " ", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"This", " ", "defines", " ", "a", " ", "function"}], ",", " ", 
     RowBox[{"whose", " ", "arguments", " ", "are", " ", "p", " ", "and", " ", 
      RowBox[{"q", ".", " ", "The"}], " ", "function", " ", "is", " ", 
      "calculated", " ", "according", " ", "to", " ", "the", " ", "right", 
      " ", "hand", " ", 
      RowBox[{"side", "."}]}]}], "*)"}]}]}]], "Input",
 CellChangeTimes->{{3.946402964431778*^9, 3.9464030028275747`*^9}, 
   3.946403064620502*^9, {3.947062209993602*^9, 3.947062229930872*^9}, {
   3.965138549837693*^9, 3.96513860164198*^9}, 3.965139499233099*^9, 
   3.9651397248807173`*^9, 3.965141412913101*^9},
 CellLabel->
  "In[168]:=",ExpressionUUID->"b5781d0d-f0a8-4fd4-be7a-df535f95bb66"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"P", "[", 
   RowBox[{"True", ",", "False"}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "We", " ", "can", " ", "now", " ", "call", " ", "the", " ", "function", 
     " ", 
     RowBox[{"P", ".", " ", "That"}], " ", "is"}], ",", " ", 
    RowBox[{
    "we", " ", "can", " ", "put", " ", "True", " ", "in", " ", "place", " ", 
     "of", " ", "p", " ", "and", " ", "False", " ", "in", " ", "place", " ", 
     "of", " ", 
     RowBox[{"q", "."}]}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.947062051603263*^9, 3.947062054925296*^9}, {
  3.965138607686344*^9, 3.965138634366538*^9}},
 CellLabel->
  "In[169]:=",ExpressionUUID->"50b709d2-795d-459d-9aa7-b83e24559f5d"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.9648819125629883`*^9, 3.9651391633694887`*^9, 
  3.96513921089966*^9, 3.9651395044885073`*^9, 3.965139730128981*^9, 
  3.965141416844213*^9},
 CellLabel->
  "Out[169]=",ExpressionUUID->"4fd731c1-21d5-470b-9a5d-9938a232b779"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{"False", "\[IndentingNewLine]", 
 RowBox[{"P", "[", 
  RowBox[{
   RowBox[{"p", "||", "q"}], ",", 
   RowBox[{"p", "&&", "q"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.947062337430134*^9, 3.947062359450605*^9}, {
  3.965139321788937*^9, 3.965139335033733*^9}},
 CellLabel->
  "In[170]:=",ExpressionUUID->"d5f88a00-d1f3-4989-97e9-75638876723a"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.947062366575314*^9, 3.96488191259538*^9, 
  3.9651392125141907`*^9, 3.965139327384817*^9, 3.965139506317051*^9, 
  3.965139731738624*^9, 3.965141419801772*^9},
 CellLabel->
  "Out[170]=",ExpressionUUID->"e16f5f03-09ba-4971-b17b-b9adeef8d46e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"!", 
   RowBox[{"(", 
    RowBox[{"p", "||", "q"}], ")"}]}], "&&", 
  RowBox[{"!", 
   RowBox[{"(", 
    RowBox[{"p", "&&", "q"}], ")"}]}]}]], "Output",
 CellChangeTimes->{3.947062366575314*^9, 3.96488191259538*^9, 
  3.9651392125141907`*^9, 3.965139327384817*^9, 3.965139506317051*^9, 
  3.965139731738624*^9, 3.965141419803009*^9},
 CellLabel->
  "Out[171]=",ExpressionUUID->"1fa28115-ac03-4a84-928e-f8b68b17659b"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.946403331695153*^9, 3.9464033368037558`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"7169c0b2-8f23-44ae-a02e-77f78dd776f3"],

Cell["\<\
Next we apply De Morgan\[CloseCurlyQuote]s Rule as a rewrite rule.  A rule in \
Mathematica is expressed as x->y, where we transform the expression x into \
the expression y. So let\[CloseCurlyQuote]s write the rule that corresponds \
to De Morgan\[CloseCurlyQuote]s Rule.\
\>", "Text",
 CellChangeTimes->{{3.946403370733101*^9, 3.9464033926501303`*^9}, {
  3.946403519245126*^9, 3.946403533655829*^9}, {3.946403644825786*^9, 
  3.946403675821423*^9}, {3.9651393851894712`*^9, 
  3.9651394182478123`*^9}},ExpressionUUID->"dceffdc3-863a-40fb-972b-\
54f0921642ae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rule", " ", "=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"!", "p"}], "&&", 
    RowBox[{"!", "q"}]}], "->", 
   RowBox[{"!", 
    RowBox[{"(", 
     RowBox[{"p", "||", "q"}], ")"}]}]}]}]], "Input",
 CellChangeTimes->{{3.965139440614072*^9, 3.965139470418324*^9}, {
  3.965384645678483*^9, 
  3.965384648021377*^9}},ExpressionUUID->"c50327f3-01e9-4ac7-b453-\
bf20e1f4bf0c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"!", "p"}], "&&", 
   RowBox[{"!", "q"}]}], "\[Rule]", 
  RowBox[{"p", "||", "q"}]}]], "Output",
 CellChangeTimes->{3.965139475612959*^9, 3.965139529337017*^9, 
  3.9651395736257467`*^9, 3.9651396954519567`*^9, 3.965139734986391*^9, 
  3.9651414232802687`*^9},
 CellLabel->
  "Out[172]=",ExpressionUUID->"274ddde8-2258-426f-9380-2180684e22c4"]
}, Open  ]],

Cell["The / . operator applies a rule.", "Text",
 CellChangeTimes->{
  3.9651394256679897`*^9},ExpressionUUID->"a511ff3d-b9a8-417b-a7dd-\
fa75af8dfe70"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"P", "[", 
   RowBox[{"p", ",", "q"}], "]"}], " ", "/.", " ", "rule"}]], "Input",
 CellChangeTimes->{{3.946403396911446*^9, 3.946403479496277*^9}, {
  3.946403536092083*^9, 3.9464035373435717`*^9}, {3.947062692869257*^9, 
  3.9470627032077837`*^9}, {3.965139568717857*^9, 3.965139569385355*^9}},
 CellLabel->
  "In[173]:=",ExpressionUUID->"21188078-e132-4f7a-a883-bdc758574e25"],

Cell[BoxData[
 RowBox[{"p", "||", "q"}]], "Output",
 CellChangeTimes->{{3.9464034398649273`*^9, 3.9464034803637238`*^9}, 
   3.946403626694867*^9, 3.964881912617832*^9, 3.965139292619135*^9, {
   3.96513954120691*^9, 3.96513957016789*^9}, 3.965139697720015*^9, 
   3.9651397372278423`*^9, 3.965141427174831*^9},
 CellLabel->
  "Out[173]=",ExpressionUUID->"37ef5674-5eb3-447f-8463-eaba64e01251"]
}, Open  ]],

Cell["\<\
It worked! Or did it? What if we are not using the letters p and q to denote \
the basic propositions?\
\>", "Text",
 CellChangeTimes->{{3.9464035430332603`*^9, 
  3.946403578562175*^9}},ExpressionUUID->"4df226a8-3a1b-48f6-a187-\
5c8a92da79ef"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"P", "[", 
   RowBox[{"a", ",", "b"}], "]"}], " ", "/.", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"!", "p"}], "&&", 
    RowBox[{"!", "q"}]}], "->", 
   RowBox[{"!", 
    RowBox[{"(", 
     RowBox[{"p", "||", "q"}], ")"}]}]}]}]], "Input",
 CellChangeTimes->{{3.9464035848139563`*^9, 3.946403606327601*^9}, {
  3.965384650513296*^9, 
  3.965384653744561*^9}},ExpressionUUID->"a2c903bb-a276-4b2b-8a60-\
8cfb98517aad"],

Cell[BoxData[
 RowBox[{
  RowBox[{"!", "a"}], "&&", 
  RowBox[{"!", "b"}]}]], "Output",
 CellChangeTimes->{{3.946403609733665*^9, 3.946403629275732*^9}, 
   3.964881912650988*^9, 3.965139584048814*^9, 3.9651397006085453`*^9, 
   3.9651397394989357`*^9, 3.965141433230019*^9},
 CellLabel->
  "Out[174]=",ExpressionUUID->"7cfba9c0-7ad3-434c-9478-8511effc06b5"]
}, Open  ]],

Cell["\<\
This doesn\[CloseCurlyQuote]t work. Our rule should not be sensitive to the \
names of the basic propositions. The rule should apply regardless of whether \
we call the variable p or a.
To achieve this, we use Pattern Matching, as described in this tutorial: \
https://reference.wolfram.com/language/guide/RulesAndPatterns.html.en.
The gist of it is that Mathematica uses variables that end in underscores. \
These variables \[OpenCurlyDoubleQuote]match\[CloseCurlyDoubleQuote] with any \
expression. The matching value is then represented by the variable without \
the underscore.\
\>", "Text",
 CellChangeTimes->{{3.9464036180414467`*^9, 3.9464036392901297`*^9}, {
  3.946403684872697*^9, 3.946403713680942*^9}, {3.946403776138199*^9, 
  3.946403835459909*^9}, {3.965139592352769*^9, 3.9651396363960867`*^9}, {
  3.9651397028146057`*^9, 3.965139703264921*^9}, {3.9651397444698467`*^9, 
  3.9651397810872383`*^9}},ExpressionUUID->"e6d7fc05-9458-40d6-80f1-\
566fa8ed30d6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"patternMatchingRule", " ", "=", "  ", 
  RowBox[{
   RowBox[{
    RowBox[{"!", "p_"}], "&&", 
    RowBox[{"!", "q_"}]}], "->", 
   RowBox[{"!", 
    RowBox[{"(", 
     RowBox[{"p", "||", "q"}], ")"}]}]}]}]], "Input",
 CellChangeTimes->{{3.9651399166763*^9, 3.965139941645052*^9}, {
  3.965384656087708*^9, 
  3.965384658204928*^9}},ExpressionUUID->"b1364aef-cd75-4dcc-b889-\
94a709912dd3"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"!", "p_"}], "&&", 
   RowBox[{"!", "q_"}]}], "\[Rule]", 
  RowBox[{"p", "||", "q"}]}]], "Output",
 CellChangeTimes->{3.965139944198696*^9, 3.965141459293192*^9},
 CellLabel->
  "Out[175]=",ExpressionUUID->"a8581055-489f-462c-a0cb-817085fcc729"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"P", "[", 
   RowBox[{"a", ",", "b"}], "]"}], " ", "/.", 
  "patternMatchingRule"}]], "Input",
 CellChangeTimes->{{3.946403735524991*^9, 3.946403740084029*^9}, {
  3.965139935725727*^9, 3.9651399399086*^9}},
 CellLabel->
  "In[176]:=",ExpressionUUID->"f72fa8d3-f249-451e-bd2e-40a59633c3e2"],

Cell[BoxData[
 RowBox[{"a", "||", "b"}]], "Output",
 CellChangeTimes->{3.946403744925136*^9, 3.964881912672289*^9, 
  3.96513994616336*^9, 3.965141465285095*^9},
 CellLabel->
  "Out[176]=",ExpressionUUID->"1e5dfee6-0954-4628-b145-c00d28a7a2de"]
}, Open  ]],

Cell["\<\
The rule worked, even though our variables are named a and b. Let\
\[CloseCurlyQuote]s check that p_ and q_ are allowed to match compound \
propositions.\
\>", "Text",
 CellChangeTimes->{{3.9464037520815153`*^9, 3.946403769236368*^9}, {
  3.94640384396721*^9, 3.946403907253456*^9}, {3.965139953000987*^9, 
  3.965139964138894*^9}, {3.965141471444326*^9, 
  3.9651414732236834`*^9}},ExpressionUUID->"c083c0fd-0ebb-429b-a291-\
e83b924a9f69"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"P", "[", 
   RowBox[{
    RowBox[{"z", "\[Implies]", "r"}], ",", "r"}], "]"}], " ", "/.", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"!", "p_"}], "&&", 
    RowBox[{"!", "q_"}]}], "->", 
   RowBox[{"!", 
    RowBox[{"(", 
     RowBox[{"p", "||", "q"}], ")"}]}]}]}]], "Input",
 CellChangeTimes->{{3.946403910306707*^9, 3.9464039453787127`*^9}, {
  3.946403980867757*^9, 3.946403996004488*^9}, {3.9658035128425217`*^9, 
  3.965803516505233*^9}},ExpressionUUID->"12cad58f-783b-45c9-8b34-\
60f975f181ab"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"z", "\[Implies]", "r"}], ")"}], "||", "r"}]], "Output",
 CellChangeTimes->{3.946404488575007*^9, 3.964881912690713*^9, 
  3.965139980904002*^9},
 CellLabel->"Out[85]=",ExpressionUUID->"e7e45a52-59a1-4eaa-bd7f-0d96bed2525b"]
}, Open  ]],

Cell["It works!", "Text",
 CellChangeTimes->{{3.9464040097920837`*^9, 3.9464040262662363`*^9}, {
  3.965139990953033*^9, 
  3.965140003459985*^9}},ExpressionUUID->"8b641438-7239-4222-974a-\
e60b9cb1d0f5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Implementing Zybooks Table 1.5.1", "Subsection",
 CellChangeTimes->{{3.946404032859913*^9, 3.9464040398966827`*^9}, {
  3.964881865009385*^9, 
  3.96488186645597*^9}},ExpressionUUID->"47ef2699-5f19-4b6b-8660-\
6301447acf6a"],

Cell["\<\
Now that we have successfully implemented De Morgan\[CloseCurlyQuote]s Law, \
we can do the same for every equivalence of Table 1.5.1 in Zybooks. We need \
to decide which direction to apply the rule, since equivalences are \
bidirectional. We also need to make sure that we avoid writing rules that \
induce infinite loops. Our end goal is to create an automated method for \
deciding whether two logical equivalences are logically equivalent. The \
method is to use our rewrite rules to both sides, then we check if both sides \
are identical.
For each rule in Table 1.5, let\[CloseCurlyQuote]s check if Mathematica \
identifies both logically equivalent expressions as being \
\[OpenCurlyDoubleQuote]the same.\[CloseCurlyDoubleQuote] We only need to \
implement the rules that are not already considered the same.\
\>", "Text",
 CellChangeTimes->{{3.946404045809589*^9, 3.946404233479897*^9}, 
   3.946404635492782*^9, {3.9464047459585752`*^9, 3.9464047687617083`*^9}, {
   3.946404805058435*^9, 3.946404849193618*^9}, {3.946404955821332*^9, 
   3.946404956449472*^9}, {3.946405039837129*^9, 3.946405074400407*^9}, {
   3.9464054487119837`*^9, 3.946405483935384*^9}, {3.94640585600067*^9, 
   3.9464058622511272`*^9}, {3.965140009970003*^9, 
   3.965140010373111*^9}},ExpressionUUID->"dcdf1e92-f797-4c20-b6d5-\
052bcdb356a6"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"SameQ", "[", 
  RowBox[{
   RowBox[{"p", "||", "p"}], ",", "p"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"SameQ", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"p", "||", "q"}], ")"}], "||", "r"}], ",", " ", 
   RowBox[{"p", "||", 
    RowBox[{"(", 
     RowBox[{"q", "||", "r"}], ")"}]}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"SameQ", "[", 
  RowBox[{
   RowBox[{"p", "||", "q"}], ",", " ", 
   RowBox[{"q", "||", "p"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"SameQ", "[", 
  RowBox[{
   RowBox[{"p", "||", 
    RowBox[{"(", 
     RowBox[{"q", "&&", "r"}], ")"}]}], ",", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"p", "||", "q"}], ")"}], "&&", 
    RowBox[{"(", 
     RowBox[{"p", "||", "r"}], ")"}]}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"SameQ", "[", 
  RowBox[{
   RowBox[{"p", "||", "False"}], ",", "p"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"SameQ", "[", 
  RowBox[{
   RowBox[{"p", "&&", " ", "False"}], ",", " ", "False"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"SameQ", "[", 
  RowBox[{
   RowBox[{"!", 
    RowBox[{"!", "p"}]}], ",", "p"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"SameQ", "[", 
  RowBox[{
   RowBox[{"p", "&&", 
    RowBox[{"!", "p"}]}], ",", "False"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"SameQ", "[", 
  RowBox[{
   RowBox[{"!", "True"}], ",", "False"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"SameQ", "[", 
  RowBox[{
   RowBox[{"!", 
    RowBox[{"(", 
     RowBox[{"p", "||", "q"}], ")"}]}], ",", 
   RowBox[{
    RowBox[{"!", "p"}], "&&", 
    RowBox[{"!", "q"}]}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"SameQ", "[", 
  RowBox[{
   RowBox[{"p", "||", 
    RowBox[{"(", 
     RowBox[{"p", "&&", "q"}], ")"}]}], ",", "p"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"SameQ", "[", 
  RowBox[{
   RowBox[{"p", "\[Implies]", "q"}], ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"!", "p"}], ")"}], "||", "q"}]}], 
  "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.946404648487221*^9, 3.9464046927928333`*^9}, {
   3.9464047256808357`*^9, 3.946404733285355*^9}, {3.946404836869738*^9, 
   3.946404882616238*^9}, {3.946404976045094*^9, 3.946404982834491*^9}, {
   3.9464050809334993`*^9, 3.946405193083177*^9}, {3.9464052240894527`*^9, 
   3.946405409985033*^9}, 3.946405468763609*^9, {3.946405500379169*^9, 
   3.946405515726872*^9}, {3.94640556831645*^9, 3.946405715754106*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"40f2093b-30e0-465f-8de4-7b0d93cbe1c1"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{{3.946404657383586*^9, 3.946404695727727*^9}, {
   3.946404727655978*^9, 3.946404733926647*^9}, {3.946404838949122*^9, 
   3.946404844200891*^9}, 3.9464048837248793`*^9, 3.9464049857276173`*^9, 
   3.946405416289836*^9, 3.9648819127104397`*^9, 3.96514014514573*^9},
 CellLabel->"Out[86]=",ExpressionUUID->"c4ba285b-f7a6-47a8-a55a-31db3efb7199"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.946404657383586*^9, 3.946404695727727*^9}, {
   3.946404727655978*^9, 3.946404733926647*^9}, {3.946404838949122*^9, 
   3.946404844200891*^9}, 3.9464048837248793`*^9, 3.9464049857276173`*^9, 
   3.946405416289836*^9, 3.9648819127104397`*^9, 3.96514014514631*^9},
 CellLabel->"Out[87]=",ExpressionUUID->"155840f4-849e-4b62-9e52-67293cff4023"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{{3.946404657383586*^9, 3.946404695727727*^9}, {
   3.946404727655978*^9, 3.946404733926647*^9}, {3.946404838949122*^9, 
   3.946404844200891*^9}, 3.9464048837248793`*^9, 3.9464049857276173`*^9, 
   3.946405416289836*^9, 3.9648819127104397`*^9, 3.965140145146796*^9},
 CellLabel->"Out[88]=",ExpressionUUID->"feac3eaf-a0d5-44a3-bfac-f4e293f011b4"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{{3.946404657383586*^9, 3.946404695727727*^9}, {
   3.946404727655978*^9, 3.946404733926647*^9}, {3.946404838949122*^9, 
   3.946404844200891*^9}, 3.9464048837248793`*^9, 3.9464049857276173`*^9, 
   3.946405416289836*^9, 3.9648819127104397`*^9, 3.965140145147263*^9},
 CellLabel->"Out[89]=",ExpressionUUID->"c1e52d67-6e3a-491f-bf81-e26977eef0fe"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.946404657383586*^9, 3.946404695727727*^9}, {
   3.946404727655978*^9, 3.946404733926647*^9}, {3.946404838949122*^9, 
   3.946404844200891*^9}, 3.9464048837248793`*^9, 3.9464049857276173`*^9, 
   3.946405416289836*^9, 3.9648819127104397`*^9, 3.965140145147709*^9},
 CellLabel->"Out[90]=",ExpressionUUID->"27264de9-283e-4f9e-92e9-37ef15b4c732"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.946404657383586*^9, 3.946404695727727*^9}, {
   3.946404727655978*^9, 3.946404733926647*^9}, {3.946404838949122*^9, 
   3.946404844200891*^9}, 3.9464048837248793`*^9, 3.9464049857276173`*^9, 
   3.946405416289836*^9, 3.9648819127104397`*^9, 3.965140145148156*^9},
 CellLabel->"Out[91]=",ExpressionUUID->"9c09b0ed-5e4f-4e1d-a012-814088be7b40"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.946404657383586*^9, 3.946404695727727*^9}, {
   3.946404727655978*^9, 3.946404733926647*^9}, {3.946404838949122*^9, 
   3.946404844200891*^9}, 3.9464048837248793`*^9, 3.9464049857276173`*^9, 
   3.946405416289836*^9, 3.9648819127104397`*^9, 3.965140145154846*^9},
 CellLabel->"Out[92]=",ExpressionUUID->"6f9fc131-03d1-42d8-a2bc-f077f979d450"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{{3.946404657383586*^9, 3.946404695727727*^9}, {
   3.946404727655978*^9, 3.946404733926647*^9}, {3.946404838949122*^9, 
   3.946404844200891*^9}, 3.9464048837248793`*^9, 3.9464049857276173`*^9, 
   3.946405416289836*^9, 3.9648819127104397`*^9, 3.965140145155295*^9},
 CellLabel->"Out[93]=",ExpressionUUID->"b2c9b6ab-e9b8-4b51-a0af-381474f5d080"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.946404657383586*^9, 3.946404695727727*^9}, {
   3.946404727655978*^9, 3.946404733926647*^9}, {3.946404838949122*^9, 
   3.946404844200891*^9}, 3.9464048837248793`*^9, 3.9464049857276173`*^9, 
   3.946405416289836*^9, 3.9648819127104397`*^9, 3.965140145155738*^9},
 CellLabel->"Out[94]=",ExpressionUUID->"92665126-d491-4853-9074-1f56ac0ec51a"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{{3.946404657383586*^9, 3.946404695727727*^9}, {
   3.946404727655978*^9, 3.946404733926647*^9}, {3.946404838949122*^9, 
   3.946404844200891*^9}, 3.9464048837248793`*^9, 3.9464049857276173`*^9, 
   3.946405416289836*^9, 3.9648819127104397`*^9, 3.9651401451561604`*^9},
 CellLabel->"Out[95]=",ExpressionUUID->"cfa73c6b-ccbd-4901-9f90-07896c52c719"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{{3.946404657383586*^9, 3.946404695727727*^9}, {
   3.946404727655978*^9, 3.946404733926647*^9}, {3.946404838949122*^9, 
   3.946404844200891*^9}, 3.9464048837248793`*^9, 3.9464049857276173`*^9, 
   3.946405416289836*^9, 3.9648819127104397`*^9, 3.965140145156609*^9},
 CellLabel->"Out[96]=",ExpressionUUID->"9b9ccf72-d4f3-41ca-b2ec-c769cbe56c4d"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{{3.946404657383586*^9, 3.946404695727727*^9}, {
   3.946404727655978*^9, 3.946404733926647*^9}, {3.946404838949122*^9, 
   3.946404844200891*^9}, 3.9464048837248793`*^9, 3.9464049857276173`*^9, 
   3.946405416289836*^9, 3.9648819127104397`*^9, 3.965140145157045*^9},
 CellLabel->"Out[97]=",ExpressionUUID->"ebc0b82a-ba9b-455b-a5fa-085b22e5736b"]
}, Open  ]],

Cell["\<\
It seems that Mathematica already knows about associativity, True/False, and \
double negation. We will implement some of the other rules. The idempotent \
rules are given below.\
\>", "Text",
 CellChangeTimes->{{3.946404992976244*^9, 3.946405009578629*^9}, {
  3.946405896039454*^9, 3.946405971494039*^9}, {3.946407012447241*^9, 
  3.946407017747223*^9}, {3.9464802511117687`*^9, 3.946480251865142*^9}, {
  3.965140198263941*^9, 3.965140206690249*^9}, {3.965141511001379*^9, 
  3.965141518381897*^9}},ExpressionUUID->"ca492f79-5fbe-4bc6-b2d8-\
3fb5d350666d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Rules", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"p_", "||", "p"}], "->", "p"}], ",", 
    RowBox[{
     RowBox[{"p_", "&&", "p"}], "->", "p"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.9464049690623703`*^9, 3.946404970593998*^9}, {
  3.946405976248137*^9, 3.946406047709299*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"a6fbe09e-af3d-428c-b410-58f013cc947f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"p_", "||", "p"}], "\[Rule]", "p"}], ",", 
   RowBox[{
    RowBox[{"p_", "&&", "p"}], "\[Rule]", "p"}]}], "}"}]], "Output",
 CellChangeTimes->{3.96488191273309*^9, 3.965140226231153*^9},
 CellLabel->"Out[98]=",ExpressionUUID->"d64f3809-1f96-4780-b3c4-5ea11315d883"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Commutativity rule", "Subsection",
 CellChangeTimes->{{3.946480262014024*^9, 
  3.946480265131844*^9}},ExpressionUUID->"2c14b11c-4461-4244-9d85-\
1d596ee3da89"],

Cell["\<\
For each logical equivalence in the table, it\[CloseCurlyQuote]s \
straightforward to determine which direction the rule should go: From more \
complicated to less complicated. The only exception is the commutativity \
rule. It can create an infinite loop. If we apply it once, it\
\[CloseCurlyQuote]s fine.\
\>", "Text",
 CellChangeTimes->{{3.946406315320784*^9, 3.9464063513898*^9}, {
  3.9464064374709873`*^9, 3.9464064422874527`*^9}, {3.946480267904168*^9, 
  3.946480331071011*^9}},ExpressionUUID->"fbdbd585-e236-432f-a055-\
1189bd11949a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"p", " ", "||", " ", "q"}], " ", "/.", " ", 
  RowBox[{
   RowBox[{"p_", "||", "q_"}], "->", 
   RowBox[{"q", "||", "p"}]}]}]], "Input",
 CellChangeTimes->{{3.946406361293069*^9, 3.94640643564373*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"7c9e3ca4-9077-48c0-ba3f-b9fde531917b"],

Cell[BoxData[
 RowBox[{"q", "||", "p"}]], "Output",
 CellChangeTimes->{3.964881912755224*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"be46bd88-edf1-4e1b-99b7-53905781cc94"]
}, Open  ]],

Cell["\<\
But applying it repeatedly breaks things. So we use an ordering on the \
expressions and only apply the rule when it puts the expressions p and q in \
order. This is like ordering the variables alphabetically. Mathematica \
provides a built-in Order function that can be used to decide the order of \
any two expressions.\
\>", "Text",
 CellChangeTimes->{{3.9464064686599092`*^9, 3.946406473328397*^9}, {
  3.946406904072294*^9, 3.946406949820792*^9}, {3.9651402932289124`*^9, 
  3.96514033869865*^9}},ExpressionUUID->"deb72a4d-4dab-40d5-bdd1-\
9749f2059db0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Order", "[", 
  RowBox[{"p", ",", "q"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Order", "[", 
  RowBox[{
   RowBox[{"p", "&&", "q"}], ",", "q"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Order", "[", 
  RowBox[{"p", ",", "p"}], "]"}]}], "Input",
 CellChangeTimes->{{3.946406839105377*^9, 3.9464068406441927`*^9}, {
  3.9464068808440847`*^9, 3.946406889031457*^9}, {3.9464069593992453`*^9, 
  3.946406978676941*^9}, {3.9464088143858347`*^9, 3.946408825970085*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"79855d25-dfb5-4195-9884-0b85d325525f"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{
  3.94640684103541*^9, {3.9464068857358313`*^9, 3.9464068894974203`*^9}, 
   3.946406979789433*^9, 3.964881912773478*^9, 3.965140345407309*^9},
 CellLabel->"Out[99]=",ExpressionUUID->"3612a600-fdd4-4b0e-9b0d-61df4e36d40a"],

Cell[BoxData[
 RowBox[{"-", "1"}]], "Output",
 CellChangeTimes->{
  3.94640684103541*^9, {3.9464068857358313`*^9, 3.9464068894974203`*^9}, 
   3.946406979789433*^9, 3.964881912773478*^9, 3.965140345408124*^9},
 CellLabel->
  "Out[100]=",ExpressionUUID->"d04a0d01-4b08-46a2-a32e-0bdad752d4e2"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{
  3.94640684103541*^9, {3.9464068857358313`*^9, 3.9464068894974203`*^9}, 
   3.946406979789433*^9, 3.964881912773478*^9, 3.9651403454088793`*^9},
 CellLabel->
  "Out[101]=",ExpressionUUID->"c46eaac7-d198-4b0c-b1af-26a7c469f47b"]
}, Open  ]],

Cell["\<\
Then we can apply the commutative rule selectively, using the PatternTest: \
https://reference.wolfram.com/language/ref/PatternTest.html. More \
specifically, we need the /; operator, described here: \
https://reference.wolfram.com/language/tutorial/Patterns.html#1615
This operator can be read as \[OpenCurlyDoubleQuote]provided that.\
\[CloseCurlyDoubleQuote]\
\>", "Text",
 CellChangeTimes->{{3.946406993910734*^9, 3.946406997360587*^9}, {
   3.946407027628993*^9, 3.9464070326559553`*^9}, {3.94640735865333*^9, 
   3.946407376677663*^9}, {3.946410334621162*^9, 3.94641035823139*^9}, 
   3.9464109307813787`*^9, {3.946480578713386*^9, 
   3.9464805936544847`*^9}},ExpressionUUID->"ada38697-010e-4bac-839e-\
d0e5f75253df"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"outOfOrder", "[", 
    RowBox[{"a_", ",", "b_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Order", "[", 
     RowBox[{"a", ",", "b"}], "]"}], "==", 
    RowBox[{"-", "1"}]}]}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "This", " ", "line", " ", "is", " ", "an", " ", "example", " ", "where", 
     " ", "the"}], " ", ":=", " ", 
    RowBox[{"operator", " ", "is", " ", 
     RowBox[{"critical", ".", " ", "We"}], " ", 
     RowBox[{"don", "'"}], "t", " ", "want", " ", "to", " ", "evaluate", " ", 
     "the", " ", "rhs", " ", 
     RowBox[{"immedately", "!"}]}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"q", "||", "p"}], " ", "//.", 
  RowBox[{
   RowBox[{"(", " ", 
    RowBox[{
     RowBox[{"p_", "||", "q_"}], " ", "/;", " ", 
     RowBox[{"outOfOrder", "[", 
      RowBox[{"p", ",", "q"}], "]"}]}], ")"}], "->", 
   RowBox[{"q", "||", "p", " ", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{
      "If", " ", "p", " ", "and", " ", "q", " ", "are", " ", "out", " ", "of",
        " ", "order"}], ",", " ", 
      RowBox[{"then", " ", "switch", " ", "their", " ", 
       RowBox[{"order", "."}]}]}], "*)"}]}]}]}]}], "Input",
 CellChangeTimes->{{3.9464073796707363`*^9, 3.9464073888787603`*^9}, {
   3.946407852741514*^9, 3.946407888673625*^9}, 3.9464090929350224`*^9, {
   3.946409279047923*^9, 3.946409280170432*^9}, {3.9464096733732452`*^9, 
   3.946409722665313*^9}, {3.9464103610195713`*^9, 3.946410401271418*^9}, {
   3.946410473230332*^9, 3.9464105718371763`*^9}, {3.9464106639717627`*^9, 
   3.9464108031627493`*^9}, {3.94641088171749*^9, 3.946410911231433*^9}, {
   3.946480595405476*^9, 3.9464806375716667`*^9}, {3.9651416560058002`*^9, 
   3.9651417459135733`*^9}},ExpressionUUID->"ca67652b-f670-45d3-bddc-\
e8cfa8e9c617"],

Cell[BoxData[
 RowBox[{"p", "||", "q"}]], "Output",
 CellChangeTimes->{{3.946407886810577*^9, 3.946407889282873*^9}, {
   3.9464090900664463`*^9, 3.946409093642805*^9}, {3.946409275021076*^9, 
   3.946409283856155*^9}, {3.946409674136639*^9, 3.946409712197763*^9}, 
   3.94641057297999*^9, {3.9464108720518627`*^9, 3.946410890637847*^9}, 
   3.964881912810961*^9, {3.9651416303382874`*^9, 3.965141649045602*^9}, {
   3.965141719640719*^9, 3.9651417220434513`*^9}},
 CellLabel->
  "Out[184]=",ExpressionUUID->"c05f0204-54f1-4ff8-b712-5bc4a7a29078"]
}, Open  ]],

Cell["\<\
This might get complicated if there are more propositions, because p and q \
might match with expressions.\
\>", "Text",
 CellChangeTimes->{{3.946410919484724*^9, 3.946410922739706*^9}, {
  3.946410958903223*^9, 
  3.946410990014962*^9}},ExpressionUUID->"94d87f30-7914-46f2-b650-\
92b2c976ac46"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"p", "||", "q", "||", "r"}], "//.", 
  RowBox[{
   RowBox[{"(", " ", 
    RowBox[{
     RowBox[{"p_", "||", "q_"}], " ", "/;", " ", 
     RowBox[{"outOfOrder", "[", 
      RowBox[{"p", ",", "q"}], "]"}]}], ")"}], "->", 
   RowBox[{"q", "||", "p", " ", 
    RowBox[{"(*", 
     RowBox[{
     "This", " ", "should", " ", "give", " ", "a", " ", 
      "\"\<ReplaceRepeated\>\"", " ", 
      RowBox[{"error", ".", " ", "An"}], " ", "infinite", " ", 
      RowBox[{"loop", "."}]}], "*)"}]}]}]}]], "Input",
 CellChangeTimes->{{3.94641099352492*^9, 3.9464110091942253`*^9}, {
  3.9464806535954943`*^9, 3.9464806784184723`*^9}},
 CellLabel->
  "In[185]:=",ExpressionUUID->"774bebbf-0f5a-4cfb-a0f4-6de1ec9ccedf"],

Cell[BoxData[
 TemplateBox[{
  "ReplaceRepeated", "rrlim", 
   "\"Exiting after \\!\\(\\*RowBox[{\\\"p\\\", \\\"||\\\", \\\"q\\\", \\\"||\
\\\", \\\"r\\\"}]\\) scanned \\!\\(\\*RowBox[{\\\"65536\\\"}]\\) times.\"", 2,
    185, 4, 20721595601746493121, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9464110099732037`*^9, 3.964881912972494*^9, 
  3.9651417668999023`*^9},
 CellLabel->
  "During evaluation of \
In[185]:=",ExpressionUUID->"223700a5-a03c-425f-adff-42608a89f378"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"r", "||", "p", "||", "q"}]], "Input",
 CellChangeTimes->{3.965141769759152*^9},
 CellLabel->
  "In[186]:=",ExpressionUUID->"ccb109b1-8dbd-49d7-a925-e5050b53f393"],

Cell[BoxData[
 RowBox[{"r", "||", "p", "||", "q"}]], "Output",
 CellChangeTimes->{3.9651417699060926`*^9},
 CellLabel->
  "Out[186]=",ExpressionUUID->"ff24d5ac-c26d-46d6-9f44-eadb2b2677fb"]
}, Open  ]],

Cell["\<\
To see what went wrong, we can apply the single-replacement operator (/.) \
repeatedly.\
\>", "Text",
 CellChangeTimes->{{3.946411024167272*^9, 
  3.9464110470031233`*^9}},ExpressionUUID->"5fe32f7b-3852-467e-9f3a-\
6a3c7f0ee459"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"p", "||", "q", "||", "r"}], "/.", 
  RowBox[{
   RowBox[{"(", " ", 
    RowBox[{
     RowBox[{"p_", "||", "q_"}], " ", "/;", " ", 
     RowBox[{"outOfOrder", "[", 
      RowBox[{"p", ",", "q"}], "]"}]}], ")"}], "->", 
   RowBox[{"q", "||", "p"}]}]}]], "Input",
 CellChangeTimes->{3.9464110547589607`*^9},
 CellLabel->
  "In[187]:=",ExpressionUUID->"ea9e026c-2925-4df2-8685-58be25673190"],

Cell[BoxData[
 RowBox[{"r", "||", "p", "||", "q"}]], "Output",
 CellChangeTimes->{3.9464110577945547`*^9, 3.964881913017352*^9, 
  3.96514177440735*^9},
 CellLabel->
  "Out[187]=",ExpressionUUID->"968797dc-1057-40e4-bfb6-55fc0e908131"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", "/.", 
  RowBox[{
   RowBox[{"(", " ", 
    RowBox[{
     RowBox[{"p_", "||", "q_"}], " ", "/;", " ", 
     RowBox[{"outOfOrder", "[", 
      RowBox[{"p", ",", "q"}], "]"}]}], ")"}], "->", 
   RowBox[{"q", "||", "p"}]}]}]], "Input",
 CellChangeTimes->{{3.9464110597035437`*^9, 3.9464110704159603`*^9}},
 CellLabel->
  "In[188]:=",ExpressionUUID->"41f6bbac-99a8-4036-9384-b82cbd68d84c"],

Cell[BoxData[
 RowBox[{"q", "||", "r", "||", "p"}]], "Output",
 CellChangeTimes->{3.946411072303771*^9, 3.964881913036668*^9, 
  3.9651417766025743`*^9},
 CellLabel->
  "Out[188]=",ExpressionUUID->"f16ffd3c-e051-4a81-9105-4e83bd2dc53c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", "/.", 
  RowBox[{
   RowBox[{"(", " ", 
    RowBox[{
     RowBox[{"p_", "||", "q_"}], " ", "/;", " ", 
     RowBox[{"outOfOrder", "[", 
      RowBox[{"p", ",", "q"}], "]"}]}], ")"}], "->", 
   RowBox[{"q", "||", "p"}]}]}]], "Input",
 CellChangeTimes->{{3.946411082262638*^9, 3.946411096072772*^9}},
 CellLabel->
  "In[189]:=",ExpressionUUID->"366e37ba-c692-49fa-8ae2-c370fb92024a"],

Cell[BoxData[
 RowBox[{"p", "||", "q", "||", "r"}]], "Output",
 CellChangeTimes->{3.946411097127268*^9, 3.964881913068174*^9, 
  3.965141779088323*^9},
 CellLabel->
  "Out[189]=",ExpressionUUID->"bd67f16b-f1d2-404b-bd24-4c78f7ffcdb1"]
}, Open  ]],

Cell["\<\
After 3 applications of the rule, we are back where we started. The issue is \
that we are applying the rule to the outer \[OpenCurlyDoubleQuote]or\
\[CloseCurlyDoubleQuote] of \[OpenCurlyDoubleQuote]p || (q||r)\
\[CloseCurlyDoubleQuote]. So we really want to check that we only apply the \
commutativity rule when p and q are literals (variables or their negations). \
We can check if this is the case using the builtin Length function.\
\>", "Text",
 CellChangeTimes->{{3.94641110581068*^9, 3.946411121839896*^9}, {
  3.9464111565274267`*^9, 3.946411278397092*^9}, {3.946411358193527*^9, 
  3.946411406985413*^9}},ExpressionUUID->"a696fb48-9bdd-4e2a-8bae-\
ce4c37d7b648"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"LiteralsOutOfOrder", "[", 
   RowBox[{"a_", ",", "b_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"Length", "[", "a", "]"}], "<", "2"}], "&&", 
   RowBox[{
    RowBox[{"Length", "[", "b", "]"}], "<", "2"}], "&&", 
   RowBox[{
    RowBox[{"Order", "[", 
     RowBox[{"a", ",", "b"}], "]"}], "==", 
    RowBox[{"-", "1"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"r", "||", "q", "||", "r"}], "//.", 
  RowBox[{
   RowBox[{"(", " ", 
    RowBox[{
     RowBox[{"p_", "||", "q_"}], " ", "/;", " ", 
     RowBox[{"LiteralsOutOfOrder", "[", 
      RowBox[{"p", ",", "q"}], "]"}]}], ")"}], "->", 
   RowBox[{"q", "||", "p"}]}]}]}], "Input",
 CellChangeTimes->{{3.946411290520255*^9, 3.9464113454521627`*^9}, {
   3.946411415158642*^9, 3.946411477811667*^9}, {3.9464116736465273`*^9, 
   3.94641168729906*^9}, {3.9464117337042513`*^9, 3.946411747760013*^9}, {
   3.9470864932756147`*^9, 3.947086493630527*^9}, {3.947086666880108*^9, 
   3.9470866783400097`*^9}, {3.9470867205903482`*^9, 
   3.9470867222456636`*^9}, {3.947086752343863*^9, 3.947086757501788*^9}, 
   3.947086900326605*^9, {3.9470869781979227`*^9, 3.947087026493113*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"9d4ae042-15cf-4d04-9620-bfe8cfb1c928"],

Cell[BoxData[
 RowBox[{"q", "||", "r", "||", "r"}]], "Output",
 CellChangeTimes->{{3.946411471394322*^9, 3.946411478321919*^9}, {
   3.946411674396242*^9, 3.9464116881621437`*^9}, {3.947086461463626*^9, 
   3.947086489946302*^9}, {3.9470866505045433`*^9, 3.9470866818768797`*^9}, {
   3.947086726016778*^9, 3.9470867655777807`*^9}, 3.947086843401616*^9, {
   3.9470868756746063`*^9, 3.9470869028782797`*^9}, {3.9470870222449827`*^9, 
   3.947087027652215*^9}, 3.947761780992528*^9, 3.9648819130862017`*^9, 
   3.965473327806382*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"465e11de-9b5a-48c6-a3f6-1b6234023306"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", "/.", 
  RowBox[{
   RowBox[{"(", " ", 
    RowBox[{
     RowBox[{"p_", "||", "q_"}], " ", "/;", " ", 
     RowBox[{"LiteralsOutOfOrder", "[", 
      RowBox[{"p", ",", "q"}], "]"}]}], ")"}], "->", 
   RowBox[{"q", "||", "p"}]}]}]], "Input",
 CellChangeTimes->{{3.947086908138612*^9, 3.947086917711039*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"4c65dbc6-fe3e-4266-9302-c976fcfe2e2b"],

Cell[BoxData[
 RowBox[{"q", "||", "r", "||", "r"}]], "Output",
 CellChangeTimes->{3.947086922154188*^9, 3.964881913103517*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"c3e18d6e-95c7-4279-bac8-6dd422fb99a1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Rules so far", "Subsubsection",
 CellChangeTimes->{{3.946480350425231*^9, 
  3.946480354110354*^9}},ExpressionUUID->"db7025df-8ff8-4783-b9b0-\
78334d8b0278"],

Cell["\<\
Let\[CloseCurlyQuote]s collect the rules that we have so far and see what \
happens when we use them in a few cases.\
\>", "Text",
 CellChangeTimes->{{3.946411502108769*^9, 
  3.946411514070446*^9}},ExpressionUUID->"d4f78c57-0bf7-4c18-b89f-\
8dcd178c3d9f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Rules", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"p_", "||", "p_"}], "->", "p"}], ",", 
     RowBox[{"(*", "Idempotent", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"p_", "&&", "p_"}], "->", "p"}], ",", 
     RowBox[{"(*", "Idempotent", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"p_", "\[Implies]", "q_"}], "->", 
      RowBox[{
       RowBox[{"!", "p"}], "||", "q"}]}], ",", " ", 
     RowBox[{"(*", "Conditional", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"(", 
        RowBox[{"p_", "||", "q_"}], ")"}]}], "->", 
      RowBox[{
       RowBox[{"!", "p"}], "&&", 
       RowBox[{"!", "q"}]}]}], ",", " ", 
     RowBox[{"(*", 
      RowBox[{"De", " ", "Morgan"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"(", 
        RowBox[{"p_", "&&", "q_"}], ")"}]}], "->", 
      RowBox[{
       RowBox[{"!", "p"}], "||", 
       RowBox[{"!", "q"}]}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"(", " ", 
       RowBox[{
        RowBox[{"p_", "||", "q_"}], " ", "/;", " ", 
        RowBox[{"LiteralsOutOfOrder", "[", 
         RowBox[{"p", ",", "q"}], "]"}]}], ")"}], "->", 
      RowBox[{"q", "||", "p"}]}], ",", 
     RowBox[{"(*", "Commutative", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"(", " ", 
       RowBox[{
        RowBox[{"p_", "&&", "q_"}], " ", "/;", " ", 
        RowBox[{"LiteralsOutOfOrder", "[", 
         RowBox[{"p", ",", "q"}], "]"}]}], ")"}], "->", 
      RowBox[{"q", "&&", "p"}]}], ",", 
     RowBox[{"(*", "Commutative", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"p_", "||", 
       RowBox[{"(", 
        RowBox[{"q_", "&&", "r_"}], ")"}]}], "->", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"p", "||", "q"}], ")"}], "&&", 
       RowBox[{"(", 
        RowBox[{"p", "||", "r"}], ")"}]}]}], ",", " ", 
     RowBox[{"(*", 
      RowBox[{"Distributive", " ", "Rules"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"p_", "&&", 
       RowBox[{"!", "p_"}]}], "->", "False"}], ",", " ", 
     RowBox[{"(*", "Complement", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"p_", " ", "||", " ", 
       RowBox[{"!", "p_"}]}], "->", "True"}]}], " ", 
    RowBox[{"(*", "Complement", "*)"}], "\[IndentingNewLine]", "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"p", "||", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"q", "&&", 
       RowBox[{"(", 
        RowBox[{"True", "||", "r"}], ")"}]}], " ", ")"}], "&&", 
     RowBox[{"!", "p"}]}], ")"}]}], "/.", "Rules"}]}], "Input",
 CellChangeTimes->{{3.94641153456923*^9, 3.946411624722251*^9}, {
  3.9464118601794987`*^9, 3.946411885011347*^9}, {3.946411943712069*^9, 
  3.946412300034531*^9}, {3.946412374143425*^9, 3.946412399761655*^9}, {
  3.946412727681367*^9, 3.94641274718017*^9}, {3.946412823436656*^9, 
  3.946412902781583*^9}, {3.946413162411586*^9, 3.946413171432579*^9}, {
  3.9470830437976303`*^9, 3.9470830504306498`*^9}, {3.9470833741316547`*^9, 
  3.947083411770156*^9}, {3.947086370491221*^9, 3.947086418277742*^9}, {
  3.94708649550243*^9, 3.947086498852882*^9}, {3.947086532419403*^9, 
  3.947086616193655*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"2778d1c3-51f6-41d6-beb3-6bd16e7f2d72"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"p", "||", "q"}], ")"}], "&&", 
  RowBox[{"(", 
   RowBox[{"p", "||", 
    RowBox[{"!", "p"}]}], ")"}]}]], "Output",
 CellChangeTimes->{
  3.947086392646935*^9, {3.947086439306878*^9, 3.9470865013729057`*^9}, {
   3.9470865501667223`*^9, 3.9470866262560062`*^9}, {3.9470867761773977`*^9, 
   3.947086781031103*^9}, 3.947087030859599*^9, 3.947761787904263*^9, 
   3.964881913147253*^9, {3.965140430951914*^9, 3.9651404458869553`*^9}, 
   3.9651418071961517`*^9, 3.965473329786663*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"11dd4f3f-9826-4695-b9e9-2ed39c7c9076"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"p", "||", 
   RowBox[{"!", "p"}]}], " ", "/.", "Rules"}]], "Input",
 CellChangeTimes->{{3.946411797480344*^9, 3.946411807706975*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"05accdf1-5182-47f9-8615-5e43155a4117"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.94641181085739*^9, 3.946411891566457*^9, 
  3.946412316641705*^9, 3.9470830571053133`*^9, 3.947086441656168*^9, 
  3.947086782784273*^9, 3.9470870363198757`*^9, 3.9648819131650667`*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"c80b6c13-c0c4-4c46-ab49-d0abd515981b"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Quiz Question:", "Section",
 CellChangeTimes->{{3.9464120448266363`*^9, 3.946412054471341*^9}, {
  3.946412326944667*^9, 
  3.946412331768139*^9}},ExpressionUUID->"0d7ec42f-5853-4d93-9dd7-\
dfb737a014a0"],

Cell["\<\
(15 points) Use the rules to see what this reduces to by running the line. \
Then, give a rigorous, step-by-step proof by repeatedly applying one rule at \
a time. Give justifications for the first 3 steps.\
\>", "Text",
 CellChangeTimes->{{3.946412344709631*^9, 3.946412370329763*^9}, {
  3.946412411226643*^9, 3.94641242328728*^9}, {3.946412914238656*^9, 
  3.946412968393772*^9}, {3.946413074981182*^9, 3.946413078391383*^9}, {
  3.965142032660617*^9, 
  3.9651420562023706`*^9}},ExpressionUUID->"a00d7d9c-f1b7-4568-9f4a-\
71d9264ae7c8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"p", "&&", "q"}], ")"}], "\[Implies]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"!", "p"}], "&&", "q"}], ")"}], "\[Implies]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"p", "&&", 
          RowBox[{"!", "q"}]}], ")"}], "\[Implies]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"!", "p"}], "&&", 
          RowBox[{"!", "q"}]}], ")"}]}], ")"}]}], ")"}]}], " ", "//.", " ", 
   "Rules"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.94641242474938*^9, 3.9464125059454937`*^9}, {
   3.946412589077117*^9, 3.946412618062668*^9}, {3.946412909270577*^9, 
   3.9464129450209923`*^9}, {3.946413016832082*^9, 3.946413017906741*^9}, {
   3.9470796639108887`*^9, 3.947079675678628*^9}, 3.947086350648521*^9, 
   3.965140481219369*^9, 
   3.965140532868856*^9},ExpressionUUID->"719c771a-d819-4429-bed1-\
cb20af6290bf"],

Cell["\<\
Bonus (5 points): Give an example where our rules don\[CloseCurlyQuote]t \
fully reduce the expression. Hint: There\[CloseCurlyQuote]s (still) something \
weird about our commutative rule.\
\>", "Text",
 CellChangeTimes->{{3.946413030285892*^9, 3.946413084537386*^9}, {
  3.946413178061431*^9, 
  3.946413195151567*^9}},ExpressionUUID->"eb077b5f-3708-4a8f-9095-\
3109727e68de"],

Cell[CellGroupData[{

Cell["Hints for the Quiz", "Subsection",
 CellChangeTimes->{{3.946479891523272*^9, 
  3.9464799109017143`*^9}},ExpressionUUID->"b008845c-e89b-443b-8200-\
a343a5d37e9b"],

Cell["Here\[CloseCurlyQuote]s what you\[CloseCurlyQuote]re supposed to do \
with a different formula:", "Text",
 CellChangeTimes->{{3.9464799086380663`*^9, 
  3.94647994841317*^9}},ExpressionUUID->"2d726a38-199d-4bcf-98bd-\
5c7e017d7029"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"!", 
    RowBox[{"(", 
     RowBox[{"p", "||", 
      RowBox[{"(", 
       RowBox[{"q", "&&", 
        RowBox[{"!", "r"}]}], ")"}]}], ")"}]}], ";"}], " ", 
  RowBox[{"(*", "Given", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"!", 
    RowBox[{"(", 
     RowBox[{"p", "||", 
      RowBox[{"(", 
       RowBox[{"q", "&&", 
        RowBox[{"!", "r"}]}], ")"}]}], ")"}]}], " ", "//.", "Rules"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Apply", " ", "the", " ", "rules", " ", "repeatedly", " ", "to", " ", 
    "get", " ", "the", " ", "result"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"!", 
    RowBox[{"(", 
     RowBox[{"p", "||", 
      RowBox[{"(", 
       RowBox[{"q", "&&", 
        RowBox[{"!", "r"}]}], ")"}]}], ")"}]}], " ", "/.", "Rules"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Apply", " ", "one", " ", "rule"}], ",", " ", 
    RowBox[{
     RowBox[{"to", " ", "go", " ", "step"}], "-", "by", "-", "step"}]}], 
   "*)"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.946479950278104*^9, 3.946480044471958*^9}, {
   3.946480074499053*^9, 3.946480091973092*^9}, 3.947063271939591*^9, {
   3.947063368854312*^9, 3.947063375331911*^9}, {3.965141832069125*^9, 
   3.9651418454395447`*^9}},
 CellLabel->
  "In[214]:=",ExpressionUUID->"b55d91e0-ecd3-4ea5-80e4-5f3107d4f519"],

Cell[BoxData[
 RowBox[{
  RowBox[{"!", "p"}], "&&", 
  RowBox[{"(", 
   RowBox[{"r", "||", 
    RowBox[{"!", "q"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.947083300820526*^9, 3.94708708480978*^9, 
  3.964881913191785*^9, 3.96514207393349*^9, 3.965142124388844*^9, 
  3.965142406302465*^9, 3.9651424933768787`*^9},
 CellLabel->
  "Out[215]=",ExpressionUUID->"71ded060-62bd-4687-bc6c-93cbd9be05ce"],

Cell[BoxData[
 RowBox[{
  RowBox[{"!", "p"}], "&&", 
  RowBox[{"!", 
   RowBox[{"(", 
    RowBox[{"q", "&&", 
     RowBox[{"!", "r"}]}], ")"}]}]}]], "Output",
 CellChangeTimes->{3.947083300820526*^9, 3.94708708480978*^9, 
  3.964881913191785*^9, 3.96514207393349*^9, 3.965142124388844*^9, 
  3.965142406302465*^9, 3.9651424933782997`*^9},
 CellLabel->
  "Out[216]=",ExpressionUUID->"7895e808-30a8-46a0-ad9d-bf5ba2f1e767"]
}, Open  ]],

Cell["\<\
So we know that the expression ultimately reduces to !p&&(r||!q). We also \
know that one application of a rule produces !p && !(q&&!r). This is an \
application of DeMorgan\[CloseCurlyQuote]s Law.\
\>", "Text",
 CellChangeTimes->{{3.965142142471909*^9, 
  3.9651422426987333`*^9}},ExpressionUUID->"3e026e94-e035-4f2d-8c54-\
44148dc7dc0a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", "/.", "Rules", " ", 
  RowBox[{"(*", 
   RowBox[{
   "Apply", " ", "the", " ", "rules", " ", "to", " ", "the", " ", "last", " ",
     "output"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.9470833091650753`*^9, 3.947083317502174*^9}, {
  3.965141866623021*^9, 3.965141883303011*^9}, {3.965142096731185*^9, 
  3.965142098982113*^9}},
 CellLabel->
  "In[210]:=",ExpressionUUID->"7d455b57-6aa3-4348-b842-911e23c081df"],

Cell[BoxData[
 RowBox[{
  RowBox[{"!", "p"}], "&&", 
  RowBox[{"(", 
   RowBox[{"r", "||", 
    RowBox[{"!", "q"}]}], ")"}]}]], "Output",
 CellChangeTimes->{
  3.947083317961652*^9, 3.964881913208378*^9, {3.965142090550885*^9, 
   3.96514210571373*^9}, {3.965142409552762*^9, 3.965142424841585*^9}},
 CellLabel->
  "Out[210]=",ExpressionUUID->"4215fce7-0346-4227-b509-8e77902c4188"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", "/.", "Rules", " ", 
  RowBox[{"(*", 
   RowBox[{"Do", " ", "it", " ", 
    RowBox[{"again", "."}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.965142496385064*^9, 
  3.965142501628676*^9}},ExpressionUUID->"27db5903-d5df-40a1-8e45-\
1ebb7706a7bc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"!", "p"}], "&&", 
  RowBox[{"(", 
   RowBox[{"r", "||", 
    RowBox[{"!", "q"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.965142467923317*^9},
 CellLabel->
  "Out[212]=",ExpressionUUID->"23ef8935-ed70-4462-bed3-8fee0578da2c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", "/.", "Rules", " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"And", " ", "again"}], "..."}], "*)"}], " "}]], "Input",
 CellChangeTimes->{{3.965142505536792*^9, 
  3.965142519972563*^9}},ExpressionUUID->"ad862644-38f2-4af0-b7fa-\
9cc72864d209"],

Cell[BoxData[
 RowBox[{
  RowBox[{"!", "p"}], "&&", 
  RowBox[{"(", 
   RowBox[{"r", "||", 
    RowBox[{"!", "q"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.96514247027911*^9},
 CellLabel->
  "Out[213]=",ExpressionUUID->"12a13262-1575-4ad4-bec1-01aeff28aad3"]
}, Open  ]],

Cell["This will produce a line-by line proof.", "Text",
 CellChangeTimes->{{3.946480101069757*^9, 3.946480117318149*^9}, {
  3.965142317586419*^9, 3.965142329567999*^9}, {3.9651423715568333`*^9, 
  3.965142400948641*^9}, {3.965142527167878*^9, 3.965142530249496*^9}, {
  3.965473337799576*^9, 
  3.965473344625992*^9}},ExpressionUUID->"9055c5a0-94a8-448c-9652-\
9b2be24197d1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullSimplify", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"p", "&&", "q"}], ")"}], "||", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"!", "p"}], "&&", 
     RowBox[{"!", "q"}]}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.965473346308465*^9, 3.965473382027878*^9}, {
  3.965473433044685*^9, 3.9654734368535357`*^9}, {3.965473739801816*^9, 
  3.96547375151045*^9}, {3.9654738831328793`*^9, 3.965473889648946*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"df5d4faf-bd6a-4aa6-a796-62feabf8e3c3"],

Cell[BoxData[
 RowBox[{"!", 
  RowBox[{"(", 
   RowBox[{"p", "\[Xor]", "q"}], ")"}]}]], "Output",
 CellChangeTimes->{{3.965473358079383*^9, 3.9654733724784813`*^9}, 
   3.965473437701457*^9, {3.965473752692658*^9, 3.965473759344182*^9}, 
   3.965473890226214*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"01c49eed-5d53-47e2-94f7-44735b03839b"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440, 701.25},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
CellContext->Notebook,
FrontEndVersion->"14.1 for Linux x86 (64-bit) (July 16, 2024)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"04cc2418-5c37-4c17-b4b2-5e8db74dba32"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[576, 22, 202, 3, 96, "Title",ExpressionUUID->"fe0a63a3-0ccb-4e21-89c7-f4c23ddc88f8"],
Cell[781, 27, 1019, 16, 99, "Text",ExpressionUUID->"0241d6b0-8b80-441e-90f1-c573f31de87b"],
Cell[CellGroupData[{
Cell[1825, 47, 213, 4, 52, "Subtitle",ExpressionUUID->"71ac6fa4-d744-41d7-9485-d59f1bc024fe"],
Cell[2041, 53, 2017, 38, 339, "Text",ExpressionUUID->"e06ef37e-2d29-4b66-9d4a-62a90e890ae2"],
Cell[4061, 93, 1758, 33, 339, "Text",ExpressionUUID->"f2a6c6d4-b5bf-4376-b939-ec7ebca91caf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5856, 131, 257, 4, 52, "Subtitle",ExpressionUUID->"abc2bb02-6882-4288-ba9e-24340919caa1"],
Cell[6116, 137, 341, 7, 33, "Text",ExpressionUUID->"c59dc910-9fa0-4a17-8ef7-fd061900e039"],
Cell[CellGroupData[{
Cell[6482, 148, 436, 9, 29, "Input",ExpressionUUID->"f40c0006-54ff-47e5-91e4-9b96b3d96d10"],
Cell[6921, 159, 280, 6, 33, "Output",ExpressionUUID->"9add828f-e77e-4601-a6a9-cb5e3b4220da"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7238, 170, 463, 9, 29, "Input",ExpressionUUID->"fb47e106-bc5f-40e4-af3e-3723e13850d0"],
Cell[7704, 181, 200, 5, 33, "Output",ExpressionUUID->"55eaa202-1164-45c6-bfe3-1e1d7d3792f9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7941, 191, 631, 13, 29, "Input",ExpressionUUID->"e898ff11-0dbc-4cb3-bc49-8c9707d99e12"],
Cell[8575, 206, 392, 8, 33, "Output",ExpressionUUID->"13b5a903-d9c9-4daf-9ecd-ca39f047920c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9004, 219, 558, 12, 49, "Input",ExpressionUUID->"f73a6a08-d7ec-453a-a4a0-02e5f9b06468"],
Cell[9565, 233, 272, 7, 33, "Output",ExpressionUUID->"e6b8732c-09bb-4397-93b4-56f2c0488b89"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9874, 245, 197, 3, 53, "Subsection",ExpressionUUID->"58f890fc-ff4c-4917-8cce-944b4b05194d"],
Cell[10074, 250, 452, 9, 33, "Text",ExpressionUUID->"14fcb2ed-2901-46a2-9f00-ca2ac4cc33a9"],
Cell[10529, 261, 508, 11, 29, "Input",ExpressionUUID->"f468ab21-d1b1-4dab-b713-cdcc81e6d733"],
Cell[11040, 274, 978, 22, 29, "Input",ExpressionUUID->"b5781d0d-f0a8-4fd4-be7a-df535f95bb66"],
Cell[CellGroupData[{
Cell[12043, 300, 717, 18, 29, "Input",ExpressionUUID->"50b709d2-795d-459d-9aa7-b83e24559f5d"],
Cell[12763, 320, 278, 5, 33, "Output",ExpressionUUID->"4fd731c1-21d5-470b-9a5d-9938a232b779"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13078, 330, 359, 8, 49, "Input",ExpressionUUID->"d5f88a00-d1f3-4989-97e9-75638876723a"],
Cell[13440, 340, 296, 5, 33, "Output",ExpressionUUID->"e16f5f03-09ba-4971-b17b-b9adeef8d46e"],
Cell[13739, 347, 451, 12, 33, "Output",ExpressionUUID->"1fa28115-ac03-4a84-928e-f8b68b17659b"]
}, Open  ]],
Cell[14205, 362, 172, 2, 29, "Input",ExpressionUUID->"7169c0b2-8f23-44ae-a02e-77f78dd776f3"],
Cell[14380, 366, 572, 10, 55, "Text",ExpressionUUID->"dceffdc3-863a-40fb-972b-54f0921642ae"],
Cell[CellGroupData[{
Cell[14977, 380, 397, 12, 29, "Input",ExpressionUUID->"c50327f3-01e9-4ac7-b453-bf20e1f4bf0c"],
Cell[15377, 394, 389, 10, 33, "Output",ExpressionUUID->"274ddde8-2258-426f-9380-2180684e22c4"]
}, Open  ]],
Cell[15781, 407, 152, 3, 33, "Text",ExpressionUUID->"a511ff3d-b9a8-417b-a7dd-fa75af8dfe70"],
Cell[CellGroupData[{
Cell[15958, 414, 412, 8, 29, "Input",ExpressionUUID->"21188078-e132-4f7a-a883-bdc758574e25"],
Cell[16373, 424, 394, 7, 33, "Output",ExpressionUUID->"37ef5674-5eb3-447f-8463-eaba64e01251"]
}, Open  ]],
Cell[16782, 434, 254, 6, 33, "Text",ExpressionUUID->"4df226a8-3a1b-48f6-a187-5c8a92da79ef"],
Cell[CellGroupData[{
Cell[17061, 444, 449, 14, 29, "Input",ExpressionUUID->"a2c903bb-a276-4b2b-8a60-8cfb98517aad"],
Cell[17513, 460, 358, 8, 33, "Output",ExpressionUUID->"7cfba9c0-7ad3-434c-9478-8511effc06b5"]
}, Open  ]],
Cell[17886, 471, 982, 16, 77, "Text",ExpressionUUID->"e6d7fc05-9458-40d6-80f1-566fa8ed30d6"],
Cell[CellGroupData[{
Cell[18893, 491, 413, 12, 29, "Input",ExpressionUUID->"b1364aef-cd75-4dcc-b889-94a709912dd3"],
Cell[19309, 505, 291, 8, 33, "Output",ExpressionUUID->"a8581055-489f-462c-a0cb-817085fcc729"]
}, Open  ]],
Cell[CellGroupData[{
Cell[19637, 518, 324, 8, 29, "Input",ExpressionUUID->"f72fa8d3-f249-451e-bd2e-40a59633c3e2"],
Cell[19964, 528, 244, 5, 33, "Output",ExpressionUUID->"1e5dfee6-0954-4628-b145-c00d28a7a2de"]
}, Open  ]],
Cell[20223, 536, 450, 9, 33, "Text",ExpressionUUID->"c083c0fd-0ebb-429b-a291-e83b924a9f69"],
Cell[CellGroupData[{
Cell[20698, 549, 533, 15, 29, "Input",ExpressionUUID->"12cad58f-783b-45c9-8b34-60f975f181ab"],
Cell[21234, 566, 275, 6, 33, "Output",ExpressionUUID->"e7e45a52-59a1-4eaa-bd7f-0d96bed2525b"]
}, Open  ]],
Cell[21524, 575, 204, 4, 33, "Text",ExpressionUUID->"8b641438-7239-4222-974a-e60b9cb1d0f5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21765, 584, 230, 4, 53, "Subsection",ExpressionUUID->"47ef2699-5f19-4b6b-8660-6301447acf6a"],
Cell[21998, 590, 1338, 21, 99, "Text",ExpressionUUID->"dcdf1e92-f797-4c20-b6d5-052bcdb356a6"],
Cell[CellGroupData[{
Cell[23361, 615, 2486, 71, 278, "Input",ExpressionUUID->"40f2093b-30e0-465f-8de4-7b0d93cbe1c1"],
Cell[25850, 688, 396, 5, 33, "Output",ExpressionUUID->"c4ba285b-f7a6-47a8-a55a-31db3efb7199"],
Cell[26249, 695, 395, 5, 33, "Output",ExpressionUUID->"155840f4-849e-4b62-9e52-67293cff4023"],
Cell[26647, 702, 397, 5, 33, "Output",ExpressionUUID->"feac3eaf-a0d5-44a3-bfac-f4e293f011b4"],
Cell[27047, 709, 397, 5, 33, "Output",ExpressionUUID->"c1e52d67-6e3a-491f-bf81-e26977eef0fe"],
Cell[27447, 716, 396, 5, 33, "Output",ExpressionUUID->"27264de9-283e-4f9e-92e9-37ef15b4c732"],
Cell[27846, 723, 396, 5, 33, "Output",ExpressionUUID->"9c09b0ed-5e4f-4e1d-a012-814088be7b40"],
Cell[28245, 730, 396, 5, 33, "Output",ExpressionUUID->"6f9fc131-03d1-42d8-a2bc-f077f979d450"],
Cell[28644, 737, 397, 5, 33, "Output",ExpressionUUID->"b2c9b6ab-e9b8-4b51-a0af-381474f5d080"],
Cell[29044, 744, 396, 5, 33, "Output",ExpressionUUID->"92665126-d491-4853-9074-1f56ac0ec51a"],
Cell[29443, 751, 399, 5, 33, "Output",ExpressionUUID->"cfa73c6b-ccbd-4901-9f90-07896c52c719"],
Cell[29845, 758, 397, 5, 33, "Output",ExpressionUUID->"9b9ccf72-d4f3-41ca-b2ec-c769cbe56c4d"],
Cell[30245, 765, 397, 5, 33, "Output",ExpressionUUID->"ebc0b82a-ba9b-455b-a5fa-085b22e5736b"]
}, Open  ]],
Cell[30657, 773, 569, 10, 33, "Text",ExpressionUUID->"ca492f79-5fbe-4bc6-b2d8-3fb5d350666d"],
Cell[CellGroupData[{
Cell[31251, 787, 414, 10, 29, "Input",ExpressionUUID->"a6fbe09e-af3d-428c-b410-58f013cc947f"],
Cell[31668, 799, 329, 8, 33, "Output",ExpressionUUID->"d64f3809-1f96-4780-b3c4-5ea11315d883"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[32046, 813, 166, 3, 53, "Subsection",ExpressionUUID->"2c14b11c-4461-4244-9d85-1d596ee3da89"],
Cell[32215, 818, 554, 10, 55, "Text",ExpressionUUID->"fbdbd585-e236-432f-a055-1189bd11949a"],
Cell[CellGroupData[{
Cell[32794, 832, 314, 7, 29, "Input",ExpressionUUID->"7c9e3ca4-9077-48c0-ba3f-b9fde531917b"],
Cell[33111, 841, 172, 3, 33, "Output",ExpressionUUID->"be46bd88-edf1-4e1b-99b7-53905781cc94"]
}, Open  ]],
Cell[33298, 847, 569, 10, 55, "Text",ExpressionUUID->"deb72a4d-4dab-40d5-bdd1-9749f2059db0"],
Cell[CellGroupData[{
Cell[33892, 861, 569, 11, 69, "Input",ExpressionUUID->"79855d25-dfb5-4195-9884-0b85d325525f"],
Cell[34464, 874, 271, 4, 33, "Output",ExpressionUUID->"3612a600-fdd4-4b0e-9b0d-61df4e36d40a"],
Cell[34738, 880, 292, 6, 33, "Output",ExpressionUUID->"d04a0d01-4b08-46a2-a32e-0bdad752d4e2"],
Cell[35033, 888, 277, 5, 33, "Output",ExpressionUUID->"c46eaac7-d198-4b0c-b1af-26a7c469f47b"]
}, Open  ]],
Cell[35325, 896, 734, 13, 77, "Text",ExpressionUUID->"ada38697-010e-4bac-839e-d0e5f75253df"],
Cell[CellGroupData[{
Cell[36084, 913, 1809, 43, 51, "Input",ExpressionUUID->"ca67652b-f670-45d3-bddc-e8cfa8e9c617"],
Cell[37896, 958, 547, 9, 33, "Output",ExpressionUUID->"c05f0204-54f1-4ff8-b712-5bc4a7a29078"]
}, Open  ]],
Cell[38458, 970, 305, 7, 33, "Text",ExpressionUUID->"94d87f30-7914-46f2-b650-92b2c976ac46"],
Cell[CellGroupData[{
Cell[38788, 981, 737, 19, 30, "Input",ExpressionUUID->"774bebbf-0f5a-4cfb-a0f4-6de1ec9ccedf"],
Cell[39528, 1002, 501, 11, 26, "Message",ExpressionUUID->"223700a5-a03c-425f-adff-42608a89f378"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40066, 1018, 186, 4, 29, "Input",ExpressionUUID->"ccb109b1-8dbd-49d7-a925-e5050b53f393"],
Cell[40255, 1024, 189, 4, 33, "Output",ExpressionUUID->"ff24d5ac-c26d-46d6-9f44-eadb2b2677fb"]
}, Open  ]],
Cell[40459, 1031, 239, 6, 33, "Text",ExpressionUUID->"5fe32f7b-3852-467e-9f3a-6a3c7f0ee459"],
Cell[CellGroupData[{
Cell[40723, 1041, 422, 12, 30, "Input",ExpressionUUID->"ea9e026c-2925-4df2-8685-58be25673190"],
Cell[41148, 1055, 235, 5, 33, "Output",ExpressionUUID->"968797dc-1057-40e4-bfb6-55fc0e908131"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41420, 1065, 413, 11, 30, "Input",ExpressionUUID->"41f6bbac-99a8-4036-9384-b82cbd68d84c"],
Cell[41836, 1078, 236, 5, 33, "Output",ExpressionUUID->"f16ffd3c-e051-4a81-9105-4e83bd2dc53c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[42109, 1088, 409, 11, 30, "Input",ExpressionUUID->"366e37ba-c692-49fa-8ae2-c370fb92024a"],
Cell[42521, 1101, 234, 5, 33, "Output",ExpressionUUID->"bd67f16b-f1d2-404b-bd24-4c78f7ffcdb1"]
}, Open  ]],
Cell[42770, 1109, 683, 11, 55, "Text",ExpressionUUID->"a696fb48-9bdd-4e2a-8bae-ce4c37d7b648"],
Cell[CellGroupData[{
Cell[43478, 1124, 1259, 29, 51, "Input",ExpressionUUID->"9d4ae042-15cf-4d04-9620-bfe8cfb1c928"],
Cell[44740, 1155, 610, 9, 33, "Output",ExpressionUUID->"465e11de-9b5a-48c6-a3f6-1b6234023306"]
}, Open  ]],
Cell[CellGroupData[{
Cell[45387, 1169, 413, 10, 30, "Input",ExpressionUUID->"4c65dbc6-fe3e-4266-9302-c976fcfe2e2b"],
Cell[45803, 1181, 205, 3, 33, "Output",ExpressionUUID->"c3e18d6e-95c7-4279-bac8-6dd422fb99a1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46045, 1189, 163, 3, 43, "Subsubsection",ExpressionUUID->"db7025df-8ff8-4783-b9b0-78334d8b0278"],
Cell[46211, 1194, 266, 6, 33, "Text",ExpressionUUID->"d4f78c57-0bf7-4c18-b89f-8dcd178c3d9f"],
Cell[CellGroupData[{
Cell[46502, 1204, 3367, 86, 260, "Input",ExpressionUUID->"2778d1c3-51f6-41d6-beb3-6bd16e7f2d72"],
Cell[49872, 1292, 612, 13, 33, "Output",ExpressionUUID->"11dd4f3f-9826-4695-b9e9-2ed39c7c9076"]
}, Open  ]],
Cell[CellGroupData[{
Cell[50521, 1310, 247, 5, 29, "Input",ExpressionUUID->"05accdf1-5182-47f9-8615-5e43155a4117"],
Cell[50771, 1317, 317, 4, 33, "Output",ExpressionUUID->"c80b6c13-c0c4-4c46-ab49-d0abd515981b"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[51149, 1328, 210, 4, 65, "Section",ExpressionUUID->"0d7ec42f-5853-4d93-9dd7-dfb737a014a0"],
Cell[51362, 1334, 550, 10, 33, "Text",ExpressionUUID->"a00d7d9c-f1b7-4568-9f4a-71d9264ae7c8"],
Cell[51915, 1346, 990, 27, 49, "Input",ExpressionUUID->"719c771a-d819-4429-bed1-cb20af6290bf"],
Cell[52908, 1375, 387, 8, 33, "Text",ExpressionUUID->"eb077b5f-3708-4a8f-9095-3109727e68de"],
Cell[CellGroupData[{
Cell[53320, 1387, 168, 3, 53, "Subsection",ExpressionUUID->"b008845c-e89b-443b-8200-a343a5d37e9b"],
Cell[53491, 1392, 238, 4, 33, "Text",ExpressionUUID->"2d726a38-199d-4bcf-98bd-5c7e017d7029"],
Cell[CellGroupData[{
Cell[53754, 1400, 1393, 41, 89, "Input",ExpressionUUID->"b55d91e0-ecd3-4ea5-80e4-5f3107d4f519"],
Cell[55150, 1443, 400, 10, 33, "Output",ExpressionUUID->"71ded060-62bd-4687-bc6c-93cbd9be05ce"],
Cell[55553, 1455, 421, 11, 33, "Output",ExpressionUUID->"7895e808-30a8-46a0-ad9d-bf5ba2f1e767"]
}, Open  ]],
Cell[55989, 1469, 349, 7, 33, "Text",ExpressionUUID->"3e026e94-e035-4f2d-8c54-44148dc7dc0a"],
Cell[CellGroupData[{
Cell[56363, 1480, 442, 10, 29, "Input",ExpressionUUID->"7d455b57-6aa3-4348-b842-911e23c081df"],
Cell[56808, 1492, 382, 10, 33, "Output",ExpressionUUID->"4215fce7-0346-4227-b509-8e77902c4188"]
}, Open  ]],
Cell[CellGroupData[{
Cell[57227, 1507, 275, 7, 29, "Input",ExpressionUUID->"27db5903-d5df-40a1-8e45-1ebb7706a7bc"],
Cell[57505, 1516, 262, 8, 33, "Output",ExpressionUUID->"23ef8935-ed70-4462-bed3-8fee0578da2c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[57804, 1529, 272, 7, 29, "Input",ExpressionUUID->"ad862644-38f2-4af0-b7fa-9cc72864d209"],
Cell[58079, 1538, 261, 8, 33, "Output",ExpressionUUID->"12a13262-1575-4ad4-bec1-01aeff28aad3"]
}, Open  ]],
Cell[58355, 1549, 376, 6, 33, "Text",ExpressionUUID->"9055c5a0-94a8-448c-9652-9b2be24197d1"],
Cell[CellGroupData[{
Cell[58756, 1559, 523, 12, 29, "Input",ExpressionUUID->"df5d4faf-bd6a-4aa6-a796-62feabf8e3c3"],
Cell[59282, 1573, 342, 7, 33, "Output",ExpressionUUID->"01c49eed-5d53-47e2-94f7-44735b03839b"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

