(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[     22028,        506]
NotebookOptionsPosition[     19774,        457]
NotebookOutlinePosition[     20166,        473]
CellTagsIndexPosition[     20123,        470]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Lab 6: How Many Ways to Shuffle A Deck?", "Title",
 CellChangeTimes->{{3.94907556616003*^9, 3.949075566609425*^9}, {
  3.949075657825275*^9, 
  3.949075666058443*^9}},ExpressionUUID->"643cb536-cb6a-4b23-9cc8-\
0e3509f400ff"],

Cell["\<\
In this lab, we will see an example of a general method to solve common \
problems. The method is simple: 1.) Compute small examples, 2.) Consult the \
OEIS. Problem 2 of Homework 6 is solved in a similar way.\
\>", "Text",
 CellChangeTimes->{{3.949075672996107*^9, 
  3.9490757509755373`*^9}},ExpressionUUID->"3f0f8b3a-92a2-4aee-be8b-\
67da6d7d8b2a"],

Cell[CellGroupData[{

Cell["Problem Statement", "Section",
 CellChangeTimes->{{3.949075769734473*^9, 
  3.949075786483191*^9}},ExpressionUUID->"d666ed11-d868-4555-9ce2-\
55218fc0cd40"],

Cell["\<\
We need to explain what we mean by shuffling a deck of cards. We mean that \
you perform the following procedure: 1.) Split the deck into two (not \
necessarily equal) pieces. 2.) Interleave those two pieces. For example, if \
our deck consists of 5 cards, initially ordered as {1,2,3,4,5}, then after \
splitting we may get two piles, {1,2,3}, {4,5} which, after interleaving, can \
look like {4,1,2,3,5}. The only requirement that the cards in each pile are \
still in the same order relative to each other after interleaving. Note that \
{1,2,3,4,5} is a valid shuffle. Finally, we are only interested in the final \
ordering of the cards. You can get the same ordering {1,2,3,4,5} by using the \
split {1,2,3},{4,5} or by using the split {1,2}{3,4,5}. We consider these to \
be the same. I\[CloseCurlyQuote]m getting this definition from the popular \
book \[OpenCurlyDoubleQuote]Shape\[CloseCurlyDoubleQuote] by Jordan Ellenberg.

Our problem is \[OpenCurlyDoubleQuote]How many ways can you shuffle a 52-card \
deck?\[CloseCurlyDoubleQuote]

To attack the problem, let S(n) be the number of ways to shuffle a deck of n \
cards.\
\>", "Text",
 CellChangeTimes->{{3.9490757924214487`*^9, 3.949076032077305*^9}, {
  3.9490778653813887`*^9, 3.949077892942411*^9}, {3.949078042496169*^9, 
  3.949078071292202*^9}, {3.9490793416982727`*^9, 3.949079349565351*^9}, {
  3.949079387455969*^9, 3.9490794283873873`*^9}, {3.949080340980576*^9, 
  3.949080352002489*^9}, {3.949096803654916*^9, 
  3.9490968630073757`*^9}},ExpressionUUID->"c7bf1d5c-b63a-4578-8d1f-\
17e3ea80a160"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Step 1: Write out small examples", "Section",
 CellChangeTimes->{{3.949076054241647*^9, 
  3.9490760600266647`*^9}},ExpressionUUID->"6079eebb-e16f-4c1f-84f9-\
ce6a27be0a9e"],

Cell["\<\
The first step to solve a problem like this is to write out many small \
examples by hand. This is possible because our problem is easily \
parameterized by the size of the deck, n. Generally, if you have a \
complicated problem, it helps to find simpler cases.

To list out the possibilities by hand, it helps to be organized. This helps \
to ensure that we don\[CloseCurlyQuote]t miscount. To help organize the \
counting, we parameterize the shuffles by the sizes of the piles in the \
splitting step. This is indicated by the |\[CloseCurlyQuote]s.

S(1) = 1 (The shuffles are: {1})
S(2) = 2 (The shuffles are: {1,2}, | {2,1})
S(3) = 5 (The shuffles are: {1,2,3}, | {1,3,2}, {3,1,2}, | {2,1,3}, {2,3,1})
S(4) = 12 (The shuffles are: {1,2,3,4}, | {1,2,4,3}, {1,4,2,3}, {4,1,2,3}, | \
{1,3,4,2}, {1,3,2,4}, {3,1,2,4}, {3,1,4,2}, {3,4,1,2} | {2,1,3,4}, {2,3,1,4}, \
{2,3,4,1})
S(5) = 27 (The shuffles are: {1,2,3,4,5}, | {1,2,3,5,4}, {1,2,5,3,4}, \
{1,5,2,3,4}, {5,1,2,3,4}, | {1,2,4,3,5}, {1,4,2,3,5}, {4,1,2,3,5}, \
{1,2,4,5,3}, {1,4,2,5,3}, {4,1,2,5,3}, {1,4,5,2,3}, {4,1,5,2,3}, {4,5,1,2,3}, \
| {1,3,2,4,5}, {3,1,2,4,5}, {1,3,4,2,5}, {3,1,4,2,5}, {3,4,1,2,5}, \
{1,3,4,5,2}, {3,1,4,5,2}, {3,4,1,5,2}, {3,4,5,1,2} | {2,1,3,4,5}, \
{2,3,1,4,5}, {2,3,4,1,5}, {2,3,4,5,1})

Listing these possibilities by hand is tedious. It\[CloseCurlyQuote]s easy to \
make mistakes. On the other hand, sometimes we notice interesting patterns in \
the process of listing the items. We could continue and try to calculate S(6) \
by hand.\
\>", "Text",
 CellChangeTimes->{{3.94907781762577*^9, 3.9490778627284*^9}, {
  3.949077966077036*^9, 3.949077981456156*^9}, {3.94907803300036*^9, 
  3.949078037598366*^9}, {3.949078078487558*^9, 3.9490781877785053`*^9}, {
  3.9490782636371517`*^9, 3.949078351979518*^9}, {3.949078392787228*^9, 
  3.9490784854673347`*^9}, {3.94907853084454*^9, 3.949078570651414*^9}, {
  3.949078601719983*^9, 3.9490786916154327`*^9}, {3.949078755591344*^9, 
  3.9490787781423388`*^9}, {3.949078818261917*^9, 3.949078991709179*^9}, {
  3.949079217571666*^9, 3.9490793327454233`*^9}, {3.949079502677451*^9, 
  3.949079542587819*^9}, {3.9490796145005293`*^9, 3.949079690208392*^9}, {
  3.949079725859853*^9, 3.949079726567099*^9}, {3.9490798136897*^9, 
  3.9490798544962873`*^9}},ExpressionUUID->"cbbe8cf7-0ffc-4612-bfe1-\
5c7e35a65758"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Step 2: Use the OEIS", "Section",
 CellChangeTimes->{{3.9490798712063417`*^9, 
  3.949079876760035*^9}},ExpressionUUID->"c73f114f-17dc-4680-91eb-\
7d3063fa5152"],

Cell[TextData[{
 "In this step, we search the OEIS for our sequence by using the first few \
terms that we have calculated by hand. \
https://oeis.org/search?q=1%2C2%2C5%2C12%2C+27&language=english&go=Search. \
There are several entries that match our first 5 terms. To solve this \
problem, we may need to calculate more terms. Or we can read the information \
on OEIS to determine which sequence is probably correct. The first entry \
seems most likely: https://oeis.org/A000325. To know this, it helps to have a \
certain amount of mathematical literacy. In particular, we have not yet \
(officially) encountered the word \[OpenCurlyDoubleQuote]permutation\
\[CloseCurlyDoubleQuote] in this course. Alternately, you can calculate more \
terms to satisfy yourself that this is the correct sequence.\n\nBased on the \
OEIS entry, the formula for the number of ways to shuffle n cards is ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         StyleBox["S", "TI"], 
         RowBox[{"(", 
           StyleBox["n", "TI"], ")"}], "\[LongEqual]", 
         SuperscriptBox["2", 
          StyleBox["n", "TI"]], "-", 
         StyleBox["n", "TI"]}], TraditionalForm], "errors" -> {}, "input" -> 
     "S(n)=2^n-n", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "dc34b6a9-bc6b-4761-a35c-33ec52bcdaf8"],
 ", so setting ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         StyleBox["n", "TI"], "\[LongEqual]", "52"}], TraditionalForm], 
     "errors" -> {}, "input" -> "n=52", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "a5a7588d-080a-4232-aee0-24ae32d01345"],
 ", we find that there are ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         SuperscriptBox["2", "52"], "-", "52"}], TraditionalForm], 
     "errors" -> {}, "input" -> "2^{52}-52", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "772563e3-9638-4569-a0f5-5001aa11b228"],
 " ways to shuffle a deck. We can use Mathematica as a calculator to get a \
numerical answer."
}], "Text",
 CellChangeTimes->{{3.949079879766634*^9, 3.949080015747085*^9}, {
  3.949081018948448*^9, 3.949081024668779*^9}, {3.949081056284316*^9, 
  3.949081172863628*^9}, {3.9490959014987307`*^9, 
  3.949096095912747*^9}},ExpressionUUID->"8442e1d1-ecb6-46fd-8555-\
8346612f021c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NumberForm", "[", 
  RowBox[{
   RowBox[{"2", "^", "52"}], "-", "52"}], "]"}]], "Input",
 CellChangeTimes->{{3.949081143572258*^9, 3.949081148924342*^9}, {
  3.949096649213645*^9, 3.949096651396633*^9}},
 CellLabel->
  "In[154]:=",ExpressionUUID->"26506ad1-61b0-4d78-bb9c-f37b03fa915e"],

Cell[BoxData[
 TagBox[
  InterpretationBox[
   StyleBox["\<\"4503599627370444\"\>",
    ShowStringCharacters->False],
   4503599627370444,
   Editable->False],
  NumberForm]], "Output",
 CellChangeTimes->{3.9490811508046827`*^9, 3.949096652132629*^9},
 CellLabel->
  "Out[154]//NumberForm=",ExpressionUUID->"bec435ef-2dc1-4a22-b804-\
a65fa67ed39d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Step 3: Use Mathematica to list out many terms programmatically.\
\>", "Section",
 CellChangeTimes->{{3.949080027848068*^9, 3.94908004746041*^9}, 
   3.9490838262954206`*^9},ExpressionUUID->"8320214b-d291-43a1-ae83-\
2eaf9ef29900"],

Cell["\<\
It was very tedious to list even the first 5 terms of our sequence. Where \
tedium obstructs, Mathematica triumphs. Here, we show how we can list the \
first several terms programmatically using the powerful Map/Filter/Reduce \
paradigm. Map/Filter/Reduce is a collection of techniques used to manipulate \
lists. Many useful functions can be found here: \
https://reference.wolfram.com/language/guide/ListManipulation.html.

One (inefficient) way to solve this problem is to consider every possible \
permutation (arrangement) of the cards and count only those that are valid \
shuffles. We can use the built-in function Permutations to get all of the \
permutations of the cards. We will need to write a function isValid to \
determine if a permutation is a valid shuffle according to our definition. \
Then we can Select only those permutations that are valid and count them with \
the Length function.

To check if a permutation is valid, we use the powerful function FoldList \
(The documentation is more clear than I can be: \
https://reference.wolfram.com/language/ref/FoldList.html ) that plays the \
role of a loop in the Map/Filter/Reduce paradigm. The procedure is to step \
through each card and add it to one of several piles. We add a card to a pile \
if it is the next largest number. If the next card doesn\[CloseCurlyQuote]t \
belong on top of any pile, then start a new pile with it.  At the end of the \
procedure, we will have a list of piles. If there are 2 or 1 piles, then our \
permutation is a valid shuffle. 

The function FoldList takes three arguments: a function to apply repeatedly \
(Moving a card to a pile), a starting value (0 piles to start), and a list of \
values (the cards in the deck). FoldList returns a list of applications of \
the function. The last element in the output list will be the piles of cards \
after the entire deck has been processed.

The Mathematica code below implements this idea.\
\>", "Text",
 CellChangeTimes->{{3.949080058659562*^9, 3.949080070851688*^9}, {
   3.9490802154598227`*^9, 3.949080312524497*^9}, {3.9490812316971703`*^9, 
   3.949081370632674*^9}, {3.949081496452829*^9, 3.949081619005106*^9}, {
   3.9490823422404127`*^9, 3.949082362374282*^9}, {3.949083751935335*^9, 
   3.9490838940297127`*^9}, {3.9490841201547003`*^9, 3.949084127652207*^9}, 
   3.949094778584117*^9, {3.9490948972008*^9, 3.949094936112649*^9}, {
   3.949094988332003*^9, 3.949095034538746*^9}, {3.949095204062323*^9, 
   3.949095218184757*^9}, {3.949095281646859*^9, 3.9490953111412888`*^9}, {
   3.949095368983156*^9, 3.949095401781774*^9}, {3.9490954634476833`*^9, 
   3.949095752798876*^9}, {3.9490962469673986`*^9, 
   3.94909631265094*^9}},ExpressionUUID->"4c2ea87f-c5bc-48d3-b239-\
f6b74a706b44"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"addToPile", "[", 
    RowBox[{"topCard_", ",", "nextCard_"}], "]"}], ":=", " ", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"topCard", "+", "1"}], "==", "nextCard"}], ",", "nextCard", ",",
      "topCard"}], "]"}]}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "Assume", " ", "topCard", " ", "is", " ", "the", " ", "number", " ", "on",
      " ", "top", " ", "of", " ", "the", " ", 
     RowBox[{"pile", ".", " ", "Assume"}], " ", "nextCard", " ", "is", " ", 
     "the", " ", "number", " ", "of", " ", "the", " ", "next", " ", "card", 
     " ", "in", " ", "our", " ", 
     RowBox[{"deck", ".", " ", "If"}], " ", "nextCard", " ", "is", " ", "the",
      " ", "next", " ", "number", " ", "after", " ", "topCard"}], ",", " ", 
    RowBox[{"then", " ", "put", " ", "it", " ", "on", " ", 
     RowBox[{"top", ".", " ", "Otherwise"}]}], ",", " ", 
    RowBox[{"do", " ", 
     RowBox[{"nothing", "."}]}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addToPiles", "[", 
    RowBox[{"piles_", ",", "card_"}], "]"}], ":=", 
   RowBox[{"(", " ", 
    RowBox[{
     RowBox[{"newPiles", " ", "=", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"addToPile", "[", 
          RowBox[{"#", ",", "card"}], "]"}], " ", "&"}], ")"}], " ", "/@", 
       " ", "piles"}]}], ";", " ", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "We", " ", "assume", " ", "that", " ", "piles", " ", "is", " ", "a", 
        " ", "list"}], ",", " ", 
       RowBox[{"and", " ", "card", " ", "is", " ", "a", " ", "natural", " ", 
        RowBox[{"number", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"newPiles", " ", "==", " ", "piles"}], ",", 
       RowBox[{"Append", "[", 
        RowBox[{"newPiles", ",", " ", "card"}], "]"}], " ", ",", "newPiles"}],
       "]"}]}], ")"}]}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"It", "'"}], "s", " ", "possible", " ", "that", " ", "the", " ", 
     "new", " ", "card", " ", 
     RowBox[{"didn", "'"}], "t", " ", "go", " ", "on", " ", "any", " ", 
     RowBox[{"pile", ".", " ", "In"}], " ", "that", " ", "case"}], ",", " ", 
    RowBox[{"create", " ", "a", " ", "new", " ", 
     RowBox[{"pile", "."}]}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"isValid", "[", "deck_", "]"}], ":=", 
   RowBox[{
    RowBox[{"Length", "[", 
     RowBox[{"Last", "[", 
      RowBox[{"FoldList", "[", 
       RowBox[{"addToPiles", ",", " ", 
        RowBox[{"{", "}"}], ",", "deck"}], "]"}], "]"}], "]"}], "<=", "2"}]}], 
  RowBox[{"(*", 
   RowBox[{
   "This", " ", "2", " ", "represents", " ", "the", " ", "2", " ", "piles", 
    " ", "at", " ", "the", " ", 
    RowBox[{"end", "."}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"S", "[", "n_", "]"}], ":=", 
  RowBox[{"(", " ", 
   RowBox[{"Length", "[", 
    RowBox[{"Select", "[", 
     RowBox[{
      RowBox[{"Permutations", "[", 
       RowBox[{"Range", "[", "n", "]"}], "]"}], ",", " ", "isValid"}], "]"}], 
    "]"}], ")"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"S", "[", "i", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "8"}], "}"}]}], "]"}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Not", " ", 
     RowBox[{"efficient", ".", " ", "Crashes"}], " ", "for", " ", "values", 
     " ", "9"}], "+"}], "*)"}]}]}], "Input",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQAWIQbaz+Id4t562j07lFiSBarU43B0SvS1tQBKJvTTl6
CUTffsN2DURPXSl3G0THB50B00Ubtra6A2mJsvtdIFrJiHsRiJ6g7LQURPPs
v78PRL//P/kWiN518M8DEL3DlvE9iFabrvUFRMfGi30H0St9D/4G0WK/tLg8
gLT4k4viIPpexBJFEL0h3fC3D0h+2wEw/aWzXswXSHsoP1UC0buvzM0G0WaO
4mUgel5V1lQQvUYjcDqIPtH5ch6IdkrwWwai17KlrwfRew6LbQPR3y4/3Q2i
2YM+gel7ItvVzHPfOoaL7wHT4tYNOiB6eUYnmAYAcZafRA==
  "],
 CellLabel->
  "In[165]:=",ExpressionUUID->"a9171932-9fcf-4a64-8536-108301bc6236"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "5", ",", "12", ",", "27", ",", "58", ",", "121", ",", 
   "248"}], "}"}]], "Output",
 CellChangeTimes->{
  3.9490957551175528`*^9, {3.949095821769368*^9, 3.949095859890019*^9}, {
   3.9490961802732563`*^9, 3.9490961882747173`*^9}, 3.949096235421279*^9, 
   3.949096375125214*^9, 3.949096420049656*^9, 3.9492269483066072`*^9, 
   3.94957445723387*^9, 3.9495745036051083`*^9},
 CellLabel->
  "Out[169]=",ExpressionUUID->"28faee58-4e7f-4c28-8e9a-663e204d6214"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Step 4: A closed formula and simple explanation.", "Section",
 CellChangeTimes->{{3.9490804968293123`*^9, 3.949080506091164*^9}, {
  3.949081622581284*^9, 
  3.9490816231740627`*^9}},ExpressionUUID->"6cc24644-2206-4051-9a3a-\
8bba894b03e5"],

Cell["\<\
There is a better way to list the valid shuffles. Imagine that we have \
already split the deck into two piles, a Left pile of smaller cards and a \
Right pile of larger cards, but we don\[CloseCurlyQuote]t know how many cards \
are in each pile. Then we create the shuffled deck by choosing cards from \
each pile one-at-a-time and labeling them \
\[OpenCurlyQuote]L\[CloseCurlyQuote] (for Left) and \[OpenCurlyQuote]R\
\[CloseCurlyQuote] for right. The shuffled deck that we produce can be \
associated with a string of L\[CloseCurlyQuote]s and R\[CloseCurlyQuote]s. We \
can then convert the string of L\[CloseCurlyQuote]s and R\[CloseCurlyQuote]s \
unambiguously into numbers by first numbering each of the \
L\[CloseCurlyQuote]s from left to right in sequence, then labeling each of \
the R\[CloseCurlyQuote]s from left to right in sequence.

For example, the sequence R,L,L,R,L,R represents a sequence that can be \
decoded as R,L,L,R,L,R -> R,1,2,R,3,R -> 4,1,2,5,3,6.

There are 2^n sequences of {R,L}, since each of the n symbols can be either \
of 2 choices. This would seem to suggest that there are 2^n possible \
shuffles, which contradicts the OEIS entry. The issue is that multiple \
sequences of {R,L} map to the same sequence of numbers. For example, LLRRR \
and LLLLR both map to the sequence 1,2,3,4,5. In fact, this sequence is \
represented 6 times when it should only be represented once. Also, this \
fully-sorted sequence is the only sequence that has multiple representations \
as a sequence of {R,L}. This explains why the correct formula is 2^n-n. (But \
this explanation is detailed enough to qualify as a proof.)

The explanation also gives a better algorithm to generate the sequence S(n).\
\>", "Text",
 CellChangeTimes->{{3.949081629858333*^9, 3.9490820626368313`*^9}, {
  3.949082145291534*^9, 3.949082253402151*^9}, {3.9490836709576473`*^9, 
  3.9490836865677147`*^9}, {3.94909542622017*^9, 
  3.949095450669448*^9}},ExpressionUUID->"ae859b9c-81fd-46cc-a0f0-\
4cefc1ebb2e5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Step 5: Quiz", "Section",
 CellChangeTimes->{{3.949081423871955*^9, 
  3.949081427022335*^9}},ExpressionUUID->"c504b856-3828-48b2-8036-\
f8db7e1ae00e"],

Cell["\<\
(15 points) Suppose that we want to shuffle a deck of 52 cards. We perform a \
shuffle that is the same as the valid shuffles described earlier, except that \
we split the deck into 3 instead of 2 piles before interleaving. How many \
ways can this occur?

Steps:
1.) Modify the Mathematica Code to generate the first 8 examples.
2.) Enter these numbers into OEIS. There is only 1 matching entry.
3.) Find the Mathematica code in this entry, and run it in Mathematica.
4.) Modify that Mathematica code to tell you the 52nd number in the series.\
\>", "Text",
 CellChangeTimes->{{3.949096673117134*^9, 3.94909676002943*^9}, {
   3.949096885624848*^9, 3.949097138557122*^9}, 3.949495282654582*^9, {
   3.949495318891096*^9, 
   3.949495380981534*^9}},ExpressionUUID->"c32a284f-76bb-4979-902f-\
8b47b6c2bbec"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440, 701.25},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"14.1 for Linux x86 (64-bit) (July 16, 2024)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"2c82c138-320e-4ab9-92f8-e6230a1b303c"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[576, 22, 230, 4, 96, "Title",ExpressionUUID->"643cb536-cb6a-4b23-9cc8-0e3509f400ff"],
Cell[809, 28, 361, 7, 33, "Text",ExpressionUUID->"3f0f8b3a-92a2-4aee-be8b-67da6d7d8b2a"],
Cell[CellGroupData[{
Cell[1195, 39, 162, 3, 65, "Section",ExpressionUUID->"d666ed11-d868-4555-9ce2-55218fc0cd40"],
Cell[1360, 44, 1580, 26, 186, "Text",ExpressionUUID->"c7bf1d5c-b63a-4578-8d1f-17e3ea80a160"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2977, 75, 179, 3, 65, "Section",ExpressionUUID->"6079eebb-e16f-4c1f-84f9-ce6a27be0a9e"],
Cell[3159, 80, 2353, 40, 339, "Text",ExpressionUUID->"cbbe8cf7-0ffc-4612-bfe1-5c7e35a65758"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5549, 125, 167, 3, 65, "Section",ExpressionUUID->"c73f114f-17dc-4680-91eb-7d3063fa5152"],
Cell[5719, 130, 2443, 51, 164, "Text",ExpressionUUID->"8442e1d1-ecb6-46fd-8555-8346612f021c"],
Cell[CellGroupData[{
Cell[8187, 185, 310, 7, 29, "Input",ExpressionUUID->"26506ad1-61b0-4d78-bb9c-f37b03fa915e"],
Cell[8500, 194, 348, 11, 46, "Output",ExpressionUUID->"bec435ef-2dc1-4a22-b804-a65fa67ed39d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[8897, 211, 241, 5, 65, "Section",ExpressionUUID->"8320214b-d291-43a1-ae83-2eaf9ef29900"],
Cell[9141, 218, 2761, 45, 361, "Text",ExpressionUUID->"4c2ea87f-c5bc-48d3-b239-f6b74a706b44"],
Cell[CellGroupData[{
Cell[11927, 267, 3967, 102, 198, "Input",ExpressionUUID->"a9171932-9fcf-4a64-8536-108301bc6236"],
Cell[15897, 371, 520, 11, 33, "Output",ExpressionUUID->"28faee58-4e7f-4c28-8e9a-663e204d6214"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[16466, 388, 246, 4, 65, "Section",ExpressionUUID->"6cc24644-2206-4051-9a3a-8bba894b03e5"],
Cell[16715, 394, 2018, 33, 274, "Text",ExpressionUUID->"ae859b9c-81fd-46cc-a0f0-4cefc1ebb2e5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18770, 432, 157, 3, 65, "Section",ExpressionUUID->"c504b856-3828-48b2-8036-f8db7e1ae00e"],
Cell[18930, 437, 816, 16, 186, "Text",ExpressionUUID->"c32a284f-76bb-4979-902f-8b47b6c2bbec"]
}, Open  ]]
}, Open  ]]
}
]
*)

